
Test_UART_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004068  08004068  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004068  08004068  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004068  08004068  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000001c  0800408c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800408c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a742  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab8  00000000  00000000  0002a787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0002c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002ce68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c1a  00000000  00000000  0002d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf51  00000000  00000000  00044612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000866b7  00000000  00000000  00050563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003570  00000000  00000000  000d6c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004028 	.word	0x08004028

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08004028 	.word	0x08004028

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_fmul>:
 80003a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003a8:	bf1e      	ittt	ne
 80003aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ae:	ea92 0f0c 	teqne	r2, ip
 80003b2:	ea93 0f0c 	teqne	r3, ip
 80003b6:	d06f      	beq.n	8000498 <__aeabi_fmul+0xf8>
 80003b8:	441a      	add	r2, r3
 80003ba:	ea80 0c01 	eor.w	ip, r0, r1
 80003be:	0240      	lsls	r0, r0, #9
 80003c0:	bf18      	it	ne
 80003c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003c6:	d01e      	beq.n	8000406 <__aeabi_fmul+0x66>
 80003c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d4:	fba0 3101 	umull	r3, r1, r0, r1
 80003d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e0:	bf3e      	ittt	cc
 80003e2:	0049      	lslcc	r1, r1, #1
 80003e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003e8:	005b      	lslcc	r3, r3, #1
 80003ea:	ea40 0001 	orr.w	r0, r0, r1
 80003ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f2:	2afd      	cmp	r2, #253	; 0xfd
 80003f4:	d81d      	bhi.n	8000432 <__aeabi_fmul+0x92>
 80003f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003fe:	bf08      	it	eq
 8000400:	f020 0001 	biceq.w	r0, r0, #1
 8000404:	4770      	bx	lr
 8000406:	f090 0f00 	teq	r0, #0
 800040a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800040e:	bf08      	it	eq
 8000410:	0249      	lsleq	r1, r1, #9
 8000412:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000416:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041a:	3a7f      	subs	r2, #127	; 0x7f
 800041c:	bfc2      	ittt	gt
 800041e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000422:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000426:	4770      	bxgt	lr
 8000428:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800042c:	f04f 0300 	mov.w	r3, #0
 8000430:	3a01      	subs	r2, #1
 8000432:	dc5d      	bgt.n	80004f0 <__aeabi_fmul+0x150>
 8000434:	f112 0f19 	cmn.w	r2, #25
 8000438:	bfdc      	itt	le
 800043a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800043e:	4770      	bxle	lr
 8000440:	f1c2 0200 	rsb	r2, r2, #0
 8000444:	0041      	lsls	r1, r0, #1
 8000446:	fa21 f102 	lsr.w	r1, r1, r2
 800044a:	f1c2 0220 	rsb	r2, r2, #32
 800044e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000452:	ea5f 0031 	movs.w	r0, r1, rrx
 8000456:	f140 0000 	adc.w	r0, r0, #0
 800045a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800045e:	bf08      	it	eq
 8000460:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000464:	4770      	bx	lr
 8000466:	f092 0f00 	teq	r2, #0
 800046a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800046e:	bf02      	ittt	eq
 8000470:	0040      	lsleq	r0, r0, #1
 8000472:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000476:	3a01      	subeq	r2, #1
 8000478:	d0f9      	beq.n	800046e <__aeabi_fmul+0xce>
 800047a:	ea40 000c 	orr.w	r0, r0, ip
 800047e:	f093 0f00 	teq	r3, #0
 8000482:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000486:	bf02      	ittt	eq
 8000488:	0049      	lsleq	r1, r1, #1
 800048a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800048e:	3b01      	subeq	r3, #1
 8000490:	d0f9      	beq.n	8000486 <__aeabi_fmul+0xe6>
 8000492:	ea41 010c 	orr.w	r1, r1, ip
 8000496:	e78f      	b.n	80003b8 <__aeabi_fmul+0x18>
 8000498:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	bf18      	it	ne
 80004a2:	ea93 0f0c 	teqne	r3, ip
 80004a6:	d00a      	beq.n	80004be <__aeabi_fmul+0x11e>
 80004a8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004ac:	bf18      	it	ne
 80004ae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b2:	d1d8      	bne.n	8000466 <__aeabi_fmul+0xc6>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f090 0f00 	teq	r0, #0
 80004c2:	bf17      	itett	ne
 80004c4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004c8:	4608      	moveq	r0, r1
 80004ca:	f091 0f00 	teqne	r1, #0
 80004ce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d2:	d014      	beq.n	80004fe <__aeabi_fmul+0x15e>
 80004d4:	ea92 0f0c 	teq	r2, ip
 80004d8:	d101      	bne.n	80004de <__aeabi_fmul+0x13e>
 80004da:	0242      	lsls	r2, r0, #9
 80004dc:	d10f      	bne.n	80004fe <__aeabi_fmul+0x15e>
 80004de:	ea93 0f0c 	teq	r3, ip
 80004e2:	d103      	bne.n	80004ec <__aeabi_fmul+0x14c>
 80004e4:	024b      	lsls	r3, r1, #9
 80004e6:	bf18      	it	ne
 80004e8:	4608      	movne	r0, r1
 80004ea:	d108      	bne.n	80004fe <__aeabi_fmul+0x15e>
 80004ec:	ea80 0001 	eor.w	r0, r0, r1
 80004f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fc:	4770      	bx	lr
 80004fe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000502:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000506:	4770      	bx	lr

08000508 <__aeabi_drsub>:
 8000508:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e002      	b.n	8000514 <__adddf3>
 800050e:	bf00      	nop

08000510 <__aeabi_dsub>:
 8000510:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000514 <__adddf3>:
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051e:	ea94 0f05 	teq	r4, r5
 8000522:	bf08      	it	eq
 8000524:	ea90 0f02 	teqeq	r0, r2
 8000528:	bf1f      	itttt	ne
 800052a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000532:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000536:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053a:	f000 80e2 	beq.w	8000702 <__adddf3+0x1ee>
 800053e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000542:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000546:	bfb8      	it	lt
 8000548:	426d      	neglt	r5, r5
 800054a:	dd0c      	ble.n	8000566 <__adddf3+0x52>
 800054c:	442c      	add	r4, r5
 800054e:	ea80 0202 	eor.w	r2, r0, r2
 8000552:	ea81 0303 	eor.w	r3, r1, r3
 8000556:	ea82 0000 	eor.w	r0, r2, r0
 800055a:	ea83 0101 	eor.w	r1, r3, r1
 800055e:	ea80 0202 	eor.w	r2, r0, r2
 8000562:	ea81 0303 	eor.w	r3, r1, r3
 8000566:	2d36      	cmp	r5, #54	; 0x36
 8000568:	bf88      	it	hi
 800056a:	bd30      	pophi	{r4, r5, pc}
 800056c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000570:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000574:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000578:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x70>
 800057e:	4240      	negs	r0, r0
 8000580:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000584:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000588:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800058c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x84>
 8000592:	4252      	negs	r2, r2
 8000594:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000598:	ea94 0f05 	teq	r4, r5
 800059c:	f000 80a7 	beq.w	80006ee <__adddf3+0x1da>
 80005a0:	f1a4 0401 	sub.w	r4, r4, #1
 80005a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a8:	db0d      	blt.n	80005c6 <__adddf3+0xb2>
 80005aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ae:	fa22 f205 	lsr.w	r2, r2, r5
 80005b2:	1880      	adds	r0, r0, r2
 80005b4:	f141 0100 	adc.w	r1, r1, #0
 80005b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005bc:	1880      	adds	r0, r0, r2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	4159      	adcs	r1, r3
 80005c4:	e00e      	b.n	80005e4 <__adddf3+0xd0>
 80005c6:	f1a5 0520 	sub.w	r5, r5, #32
 80005ca:	f10e 0e20 	add.w	lr, lr, #32
 80005ce:	2a01      	cmp	r2, #1
 80005d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d4:	bf28      	it	cs
 80005d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	18c0      	adds	r0, r0, r3
 80005e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e8:	d507      	bpl.n	80005fa <__adddf3+0xe6>
 80005ea:	f04f 0e00 	mov.w	lr, #0
 80005ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fe:	d31b      	bcc.n	8000638 <__adddf3+0x124>
 8000600:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000604:	d30c      	bcc.n	8000620 <__adddf3+0x10c>
 8000606:	0849      	lsrs	r1, r1, #1
 8000608:	ea5f 0030 	movs.w	r0, r0, rrx
 800060c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000610:	f104 0401 	add.w	r4, r4, #1
 8000614:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000618:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800061c:	f080 809a 	bcs.w	8000754 <__adddf3+0x240>
 8000620:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	ea41 0105 	orr.w	r1, r1, r5
 8000636:	bd30      	pop	{r4, r5, pc}
 8000638:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800063c:	4140      	adcs	r0, r0
 800063e:	eb41 0101 	adc.w	r1, r1, r1
 8000642:	3c01      	subs	r4, #1
 8000644:	bf28      	it	cs
 8000646:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064a:	d2e9      	bcs.n	8000620 <__adddf3+0x10c>
 800064c:	f091 0f00 	teq	r1, #0
 8000650:	bf04      	itt	eq
 8000652:	4601      	moveq	r1, r0
 8000654:	2000      	moveq	r0, #0
 8000656:	fab1 f381 	clz	r3, r1
 800065a:	bf08      	it	eq
 800065c:	3320      	addeq	r3, #32
 800065e:	f1a3 030b 	sub.w	r3, r3, #11
 8000662:	f1b3 0220 	subs.w	r2, r3, #32
 8000666:	da0c      	bge.n	8000682 <__adddf3+0x16e>
 8000668:	320c      	adds	r2, #12
 800066a:	dd08      	ble.n	800067e <__adddf3+0x16a>
 800066c:	f102 0c14 	add.w	ip, r2, #20
 8000670:	f1c2 020c 	rsb	r2, r2, #12
 8000674:	fa01 f00c 	lsl.w	r0, r1, ip
 8000678:	fa21 f102 	lsr.w	r1, r1, r2
 800067c:	e00c      	b.n	8000698 <__adddf3+0x184>
 800067e:	f102 0214 	add.w	r2, r2, #20
 8000682:	bfd8      	it	le
 8000684:	f1c2 0c20 	rsble	ip, r2, #32
 8000688:	fa01 f102 	lsl.w	r1, r1, r2
 800068c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000690:	bfdc      	itt	le
 8000692:	ea41 010c 	orrle.w	r1, r1, ip
 8000696:	4090      	lslle	r0, r2
 8000698:	1ae4      	subs	r4, r4, r3
 800069a:	bfa2      	ittt	ge
 800069c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a0:	4329      	orrge	r1, r5
 80006a2:	bd30      	popge	{r4, r5, pc}
 80006a4:	ea6f 0404 	mvn.w	r4, r4
 80006a8:	3c1f      	subs	r4, #31
 80006aa:	da1c      	bge.n	80006e6 <__adddf3+0x1d2>
 80006ac:	340c      	adds	r4, #12
 80006ae:	dc0e      	bgt.n	80006ce <__adddf3+0x1ba>
 80006b0:	f104 0414 	add.w	r4, r4, #20
 80006b4:	f1c4 0220 	rsb	r2, r4, #32
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f302 	lsl.w	r3, r1, r2
 80006c0:	ea40 0003 	orr.w	r0, r0, r3
 80006c4:	fa21 f304 	lsr.w	r3, r1, r4
 80006c8:	ea45 0103 	orr.w	r1, r5, r3
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f1c4 040c 	rsb	r4, r4, #12
 80006d2:	f1c4 0220 	rsb	r2, r4, #32
 80006d6:	fa20 f002 	lsr.w	r0, r0, r2
 80006da:	fa01 f304 	lsl.w	r3, r1, r4
 80006de:	ea40 0003 	orr.w	r0, r0, r3
 80006e2:	4629      	mov	r1, r5
 80006e4:	bd30      	pop	{r4, r5, pc}
 80006e6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ea:	4629      	mov	r1, r5
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	f094 0f00 	teq	r4, #0
 80006f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f6:	bf06      	itte	eq
 80006f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006fc:	3401      	addeq	r4, #1
 80006fe:	3d01      	subne	r5, #1
 8000700:	e74e      	b.n	80005a0 <__adddf3+0x8c>
 8000702:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000706:	bf18      	it	ne
 8000708:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800070c:	d029      	beq.n	8000762 <__adddf3+0x24e>
 800070e:	ea94 0f05 	teq	r4, r5
 8000712:	bf08      	it	eq
 8000714:	ea90 0f02 	teqeq	r0, r2
 8000718:	d005      	beq.n	8000726 <__adddf3+0x212>
 800071a:	ea54 0c00 	orrs.w	ip, r4, r0
 800071e:	bf04      	itt	eq
 8000720:	4619      	moveq	r1, r3
 8000722:	4610      	moveq	r0, r2
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	ea91 0f03 	teq	r1, r3
 800072a:	bf1e      	ittt	ne
 800072c:	2100      	movne	r1, #0
 800072e:	2000      	movne	r0, #0
 8000730:	bd30      	popne	{r4, r5, pc}
 8000732:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000736:	d105      	bne.n	8000744 <__adddf3+0x230>
 8000738:	0040      	lsls	r0, r0, #1
 800073a:	4149      	adcs	r1, r1
 800073c:	bf28      	it	cs
 800073e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd30      	pop	{r4, r5, pc}
 8000744:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000748:	bf3c      	itt	cc
 800074a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074e:	bd30      	popcc	{r4, r5, pc}
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000766:	bf1a      	itte	ne
 8000768:	4619      	movne	r1, r3
 800076a:	4610      	movne	r0, r2
 800076c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000770:	bf1c      	itt	ne
 8000772:	460b      	movne	r3, r1
 8000774:	4602      	movne	r2, r0
 8000776:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077a:	bf06      	itte	eq
 800077c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000780:	ea91 0f03 	teqeq	r1, r3
 8000784:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000788:	bd30      	pop	{r4, r5, pc}
 800078a:	bf00      	nop

0800078c <__aeabi_ui2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f04f 0500 	mov.w	r5, #0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e750      	b.n	800064c <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_i2d>:
 80007ac:	f090 0f00 	teq	r0, #0
 80007b0:	bf04      	itt	eq
 80007b2:	2100      	moveq	r1, #0
 80007b4:	4770      	bxeq	lr
 80007b6:	b530      	push	{r4, r5, lr}
 80007b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c4:	bf48      	it	mi
 80007c6:	4240      	negmi	r0, r0
 80007c8:	f04f 0100 	mov.w	r1, #0
 80007cc:	e73e      	b.n	800064c <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_f2d>:
 80007d0:	0042      	lsls	r2, r0, #1
 80007d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007de:	bf1f      	itttt	ne
 80007e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007ec:	4770      	bxne	lr
 80007ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f2:	bf08      	it	eq
 80007f4:	4770      	bxeq	lr
 80007f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fa:	bf04      	itt	eq
 80007fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000800:	4770      	bxeq	lr
 8000802:	b530      	push	{r4, r5, lr}
 8000804:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000808:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800080c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000810:	e71c      	b.n	800064c <__adddf3+0x138>
 8000812:	bf00      	nop

08000814 <__aeabi_ul2d>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	b530      	push	{r4, r5, lr}
 800081e:	f04f 0500 	mov.w	r5, #0
 8000822:	e00a      	b.n	800083a <__aeabi_l2d+0x16>

08000824 <__aeabi_l2d>:
 8000824:	ea50 0201 	orrs.w	r2, r0, r1
 8000828:	bf08      	it	eq
 800082a:	4770      	bxeq	lr
 800082c:	b530      	push	{r4, r5, lr}
 800082e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000832:	d502      	bpl.n	800083a <__aeabi_l2d+0x16>
 8000834:	4240      	negs	r0, r0
 8000836:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000842:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000846:	f43f aed8 	beq.w	80005fa <__adddf3+0xe6>
 800084a:	f04f 0203 	mov.w	r2, #3
 800084e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000852:	bf18      	it	ne
 8000854:	3203      	addne	r2, #3
 8000856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085a:	bf18      	it	ne
 800085c:	3203      	addne	r2, #3
 800085e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000862:	f1c2 0320 	rsb	r3, r2, #32
 8000866:	fa00 fc03 	lsl.w	ip, r0, r3
 800086a:	fa20 f002 	lsr.w	r0, r0, r2
 800086e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000872:	ea40 000e 	orr.w	r0, r0, lr
 8000876:	fa21 f102 	lsr.w	r1, r1, r2
 800087a:	4414      	add	r4, r2
 800087c:	e6bd      	b.n	80005fa <__adddf3+0xe6>
 800087e:	bf00      	nop

08000880 <__gedf2>:
 8000880:	f04f 3cff 	mov.w	ip, #4294967295
 8000884:	e006      	b.n	8000894 <__cmpdf2+0x4>
 8000886:	bf00      	nop

08000888 <__ledf2>:
 8000888:	f04f 0c01 	mov.w	ip, #1
 800088c:	e002      	b.n	8000894 <__cmpdf2+0x4>
 800088e:	bf00      	nop

08000890 <__cmpdf2>:
 8000890:	f04f 0c01 	mov.w	ip, #1
 8000894:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800089c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008a4:	bf18      	it	ne
 80008a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008aa:	d01b      	beq.n	80008e4 <__cmpdf2+0x54>
 80008ac:	b001      	add	sp, #4
 80008ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008b2:	bf0c      	ite	eq
 80008b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008b8:	ea91 0f03 	teqne	r1, r3
 80008bc:	bf02      	ittt	eq
 80008be:	ea90 0f02 	teqeq	r0, r2
 80008c2:	2000      	moveq	r0, #0
 80008c4:	4770      	bxeq	lr
 80008c6:	f110 0f00 	cmn.w	r0, #0
 80008ca:	ea91 0f03 	teq	r1, r3
 80008ce:	bf58      	it	pl
 80008d0:	4299      	cmppl	r1, r3
 80008d2:	bf08      	it	eq
 80008d4:	4290      	cmpeq	r0, r2
 80008d6:	bf2c      	ite	cs
 80008d8:	17d8      	asrcs	r0, r3, #31
 80008da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008de:	f040 0001 	orr.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ec:	d102      	bne.n	80008f4 <__cmpdf2+0x64>
 80008ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008f2:	d107      	bne.n	8000904 <__cmpdf2+0x74>
 80008f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008fc:	d1d6      	bne.n	80008ac <__cmpdf2+0x1c>
 80008fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000902:	d0d3      	beq.n	80008ac <__cmpdf2+0x1c>
 8000904:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_cdrcmple>:
 800090c:	4684      	mov	ip, r0
 800090e:	4610      	mov	r0, r2
 8000910:	4662      	mov	r2, ip
 8000912:	468c      	mov	ip, r1
 8000914:	4619      	mov	r1, r3
 8000916:	4663      	mov	r3, ip
 8000918:	e000      	b.n	800091c <__aeabi_cdcmpeq>
 800091a:	bf00      	nop

0800091c <__aeabi_cdcmpeq>:
 800091c:	b501      	push	{r0, lr}
 800091e:	f7ff ffb7 	bl	8000890 <__cmpdf2>
 8000922:	2800      	cmp	r0, #0
 8000924:	bf48      	it	mi
 8000926:	f110 0f00 	cmnmi.w	r0, #0
 800092a:	bd01      	pop	{r0, pc}

0800092c <__aeabi_dcmpeq>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff fff4 	bl	800091c <__aeabi_cdcmpeq>
 8000934:	bf0c      	ite	eq
 8000936:	2001      	moveq	r0, #1
 8000938:	2000      	movne	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmplt>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffea 	bl	800091c <__aeabi_cdcmpeq>
 8000948:	bf34      	ite	cc
 800094a:	2001      	movcc	r0, #1
 800094c:	2000      	movcs	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmple>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffe0 	bl	800091c <__aeabi_cdcmpeq>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpge>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffce 	bl	800090c <__aeabi_cdrcmple>
 8000970:	bf94      	ite	ls
 8000972:	2001      	movls	r0, #1
 8000974:	2000      	movhi	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_dcmpgt>:
 800097c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000980:	f7ff ffc4 	bl	800090c <__aeabi_cdrcmple>
 8000984:	bf34      	ite	cc
 8000986:	2001      	movcc	r0, #1
 8000988:	2000      	movcs	r0, #0
 800098a:	f85d fb08 	ldr.w	pc, [sp], #8
 800098e:	bf00      	nop

08000990 <__aeabi_d2uiz>:
 8000990:	004a      	lsls	r2, r1, #1
 8000992:	d211      	bcs.n	80009b8 <__aeabi_d2uiz+0x28>
 8000994:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000998:	d211      	bcs.n	80009be <__aeabi_d2uiz+0x2e>
 800099a:	d50d      	bpl.n	80009b8 <__aeabi_d2uiz+0x28>
 800099c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a4:	d40e      	bmi.n	80009c4 <__aeabi_d2uiz+0x34>
 80009a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	4770      	bx	lr
 80009b8:	f04f 0000 	mov.w	r0, #0
 80009bc:	4770      	bx	lr
 80009be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c2:	d102      	bne.n	80009ca <__aeabi_d2uiz+0x3a>
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	4770      	bx	lr
 80009ca:	f04f 0000 	mov.w	r0, #0
 80009ce:	4770      	bx	lr

080009d0 <__aeabi_frsub>:
 80009d0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d4:	e002      	b.n	80009dc <__addsf3>
 80009d6:	bf00      	nop

080009d8 <__aeabi_fsub>:
 80009d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009dc <__addsf3>:
 80009dc:	0042      	lsls	r2, r0, #1
 80009de:	bf1f      	itttt	ne
 80009e0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e4:	ea92 0f03 	teqne	r2, r3
 80009e8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009ec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f0:	d06a      	beq.n	8000ac8 <__addsf3+0xec>
 80009f2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009fa:	bfc1      	itttt	gt
 80009fc:	18d2      	addgt	r2, r2, r3
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	4048      	eorgt	r0, r1
 8000a02:	4041      	eorgt	r1, r0
 8000a04:	bfb8      	it	lt
 8000a06:	425b      	neglt	r3, r3
 8000a08:	2b19      	cmp	r3, #25
 8000a0a:	bf88      	it	hi
 8000a0c:	4770      	bxhi	lr
 8000a0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a1a:	bf18      	it	ne
 8000a1c:	4240      	negne	r0, r0
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a2a:	bf18      	it	ne
 8000a2c:	4249      	negne	r1, r1
 8000a2e:	ea92 0f03 	teq	r2, r3
 8000a32:	d03f      	beq.n	8000ab4 <__addsf3+0xd8>
 8000a34:	f1a2 0201 	sub.w	r2, r2, #1
 8000a38:	fa41 fc03 	asr.w	ip, r1, r3
 8000a3c:	eb10 000c 	adds.w	r0, r0, ip
 8000a40:	f1c3 0320 	rsb	r3, r3, #32
 8000a44:	fa01 f103 	lsl.w	r1, r1, r3
 8000a48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a4c:	d502      	bpl.n	8000a54 <__addsf3+0x78>
 8000a4e:	4249      	negs	r1, r1
 8000a50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a58:	d313      	bcc.n	8000a82 <__addsf3+0xa6>
 8000a5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5e:	d306      	bcc.n	8000a6e <__addsf3+0x92>
 8000a60:	0840      	lsrs	r0, r0, #1
 8000a62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a66:	f102 0201 	add.w	r2, r2, #1
 8000a6a:	2afe      	cmp	r2, #254	; 0xfe
 8000a6c:	d251      	bcs.n	8000b12 <__addsf3+0x136>
 8000a6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a76:	bf08      	it	eq
 8000a78:	f020 0001 	biceq.w	r0, r0, #1
 8000a7c:	ea40 0003 	orr.w	r0, r0, r3
 8000a80:	4770      	bx	lr
 8000a82:	0049      	lsls	r1, r1, #1
 8000a84:	eb40 0000 	adc.w	r0, r0, r0
 8000a88:	3a01      	subs	r2, #1
 8000a8a:	bf28      	it	cs
 8000a8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a90:	d2ed      	bcs.n	8000a6e <__addsf3+0x92>
 8000a92:	fab0 fc80 	clz	ip, r0
 8000a96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aa2:	bfaa      	itet	ge
 8000aa4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa8:	4252      	neglt	r2, r2
 8000aaa:	4318      	orrge	r0, r3
 8000aac:	bfbc      	itt	lt
 8000aae:	40d0      	lsrlt	r0, r2
 8000ab0:	4318      	orrlt	r0, r3
 8000ab2:	4770      	bx	lr
 8000ab4:	f092 0f00 	teq	r2, #0
 8000ab8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000abc:	bf06      	itte	eq
 8000abe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ac2:	3201      	addeq	r2, #1
 8000ac4:	3b01      	subne	r3, #1
 8000ac6:	e7b5      	b.n	8000a34 <__addsf3+0x58>
 8000ac8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000acc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad0:	bf18      	it	ne
 8000ad2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad6:	d021      	beq.n	8000b1c <__addsf3+0x140>
 8000ad8:	ea92 0f03 	teq	r2, r3
 8000adc:	d004      	beq.n	8000ae8 <__addsf3+0x10c>
 8000ade:	f092 0f00 	teq	r2, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	4608      	moveq	r0, r1
 8000ae6:	4770      	bx	lr
 8000ae8:	ea90 0f01 	teq	r0, r1
 8000aec:	bf1c      	itt	ne
 8000aee:	2000      	movne	r0, #0
 8000af0:	4770      	bxne	lr
 8000af2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af6:	d104      	bne.n	8000b02 <__addsf3+0x126>
 8000af8:	0040      	lsls	r0, r0, #1
 8000afa:	bf28      	it	cs
 8000afc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	4770      	bx	lr
 8000b02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b06:	bf3c      	itt	cc
 8000b08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b0c:	4770      	bxcc	lr
 8000b0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1a:	4770      	bx	lr
 8000b1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b20:	bf16      	itet	ne
 8000b22:	4608      	movne	r0, r1
 8000b24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b28:	4601      	movne	r1, r0
 8000b2a:	0242      	lsls	r2, r0, #9
 8000b2c:	bf06      	itte	eq
 8000b2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b32:	ea90 0f01 	teqeq	r0, r1
 8000b36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_ui2f>:
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e004      	b.n	8000b4c <__aeabi_i2f+0x8>
 8000b42:	bf00      	nop

08000b44 <__aeabi_i2f>:
 8000b44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b48:	bf48      	it	mi
 8000b4a:	4240      	negmi	r0, r0
 8000b4c:	ea5f 0c00 	movs.w	ip, r0
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b58:	4601      	mov	r1, r0
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	e01c      	b.n	8000b9a <__aeabi_l2f+0x2a>

08000b60 <__aeabi_ul2f>:
 8000b60:	ea50 0201 	orrs.w	r2, r0, r1
 8000b64:	bf08      	it	eq
 8000b66:	4770      	bxeq	lr
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e00a      	b.n	8000b84 <__aeabi_l2f+0x14>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_l2f>:
 8000b70:	ea50 0201 	orrs.w	r2, r0, r1
 8000b74:	bf08      	it	eq
 8000b76:	4770      	bxeq	lr
 8000b78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__aeabi_l2f+0x14>
 8000b7e:	4240      	negs	r0, r0
 8000b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b84:	ea5f 0c01 	movs.w	ip, r1
 8000b88:	bf02      	ittt	eq
 8000b8a:	4684      	moveq	ip, r0
 8000b8c:	4601      	moveq	r1, r0
 8000b8e:	2000      	moveq	r0, #0
 8000b90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b94:	bf08      	it	eq
 8000b96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9e:	fabc f28c 	clz	r2, ip
 8000ba2:	3a08      	subs	r2, #8
 8000ba4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba8:	db10      	blt.n	8000bcc <__aeabi_l2f+0x5c>
 8000baa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bae:	4463      	add	r3, ip
 8000bb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb4:	f1c2 0220 	rsb	r2, r2, #32
 8000bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc0:	eb43 0002 	adc.w	r0, r3, r2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f102 0220 	add.w	r2, r2, #32
 8000bd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd4:	f1c2 0220 	rsb	r2, r2, #32
 8000bd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bdc:	fa21 f202 	lsr.w	r2, r1, r2
 8000be0:	eb43 0002 	adc.w	r0, r3, r2
 8000be4:	bf08      	it	eq
 8000be6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bea:	4770      	bx	lr

08000bec <__aeabi_f2iz>:
 8000bec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf4:	d30f      	bcc.n	8000c16 <__aeabi_f2iz+0x2a>
 8000bf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfe:	d90d      	bls.n	8000c1c <__aeabi_f2iz+0x30>
 8000c00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c10:	bf18      	it	ne
 8000c12:	4240      	negne	r0, r0
 8000c14:	4770      	bx	lr
 8000c16:	f04f 0000 	mov.w	r0, #0
 8000c1a:	4770      	bx	lr
 8000c1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c20:	d101      	bne.n	8000c26 <__aeabi_f2iz+0x3a>
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	d105      	bne.n	8000c32 <__aeabi_f2iz+0x46>
 8000c26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <delay_us+0x2c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8000c4a:	bf00      	nop
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <delay_us+0x2c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f9      	bcc.n	8000c4c <delay_us+0x14>
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000038 	.word	0x20000038

08000c68 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f001 f959 	bl	8001f4c <HAL_GPIO_Init>
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000cbc:	887b      	ldrh	r3, [r7, #2]
 8000cbe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f001 f93c 	bl	8001f4c <HAL_GPIO_Init>
}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <motor_control>:
void motor_control (double pos_right, double pos_left)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000ce6:	e9c7 2300 	strd	r2, r3, [r7]
	if (pos_left < 0 )
 8000cea:	f04f 0200 	mov.w	r2, #0
 8000cee:	f04f 0300 	mov.w	r3, #0
 8000cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000cf6:	f7ff fe23 	bl	8000940 <__aeabi_dcmplt>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d01e      	beq.n	8000d3e <motor_control+0x62>
	{
		HAL_GPIO_WritePin(INT3_GPIO_Port, INT3_Pin, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	2108      	movs	r1, #8
 8000d04:	4857      	ldr	r0, [pc, #348]	; (8000e64 <motor_control+0x188>)
 8000d06:	f001 fabc 	bl	8002282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INT4_GPIO_Port, INT4_Pin, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d10:	4855      	ldr	r0, [pc, #340]	; (8000e68 <motor_control+0x18c>)
 8000d12:	f001 fab6 	bl	8002282 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, -ARR*pos_left);
 8000d16:	230a      	movs	r3, #10
 8000d18:	425b      	negs	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fd46 	bl	80007ac <__aeabi_i2d>
 8000d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d24:	f7ff fa12 	bl	800014c <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	494f      	ldr	r1, [pc, #316]	; (8000e6c <motor_control+0x190>)
 8000d2e:	680c      	ldr	r4, [r1, #0]
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff fe2c 	bl	8000990 <__aeabi_d2uiz>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d3c:	e033      	b.n	8000da6 <motor_control+0xca>
	}
	else if (pos_left > 0)
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d4a:	f7ff fe17 	bl	800097c <__aeabi_dcmpgt>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d01d      	beq.n	8000d90 <motor_control+0xb4>
	{
		HAL_GPIO_WritePin(INT3_GPIO_Port, INT3_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	4842      	ldr	r0, [pc, #264]	; (8000e64 <motor_control+0x188>)
 8000d5a:	f001 fa92 	bl	8002282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INT4_GPIO_Port, INT4_Pin, 1);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d64:	4840      	ldr	r0, [pc, #256]	; (8000e68 <motor_control+0x18c>)
 8000d66:	f001 fa8c 	bl	8002282 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, ARR*pos_left);
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fd1d 	bl	80007ac <__aeabi_i2d>
 8000d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d76:	f7ff f9e9 	bl	800014c <__aeabi_dmul>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	493b      	ldr	r1, [pc, #236]	; (8000e6c <motor_control+0x190>)
 8000d80:	680c      	ldr	r4, [r1, #0]
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff fe03 	bl	8000990 <__aeabi_d2uiz>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d8e:	e00a      	b.n	8000da6 <motor_control+0xca>
	}
	else
	{
		HAL_GPIO_WritePin(INT3_GPIO_Port, INT3_Pin, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2108      	movs	r1, #8
 8000d94:	4833      	ldr	r0, [pc, #204]	; (8000e64 <motor_control+0x188>)
 8000d96:	f001 fa74 	bl	8002282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INT4_GPIO_Port, INT4_Pin, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da0:	4831      	ldr	r0, [pc, #196]	; (8000e68 <motor_control+0x18c>)
 8000da2:	f001 fa6e 	bl	8002282 <HAL_GPIO_WritePin>
	}
	if (pos_right < 0 )
 8000da6:	f04f 0200 	mov.w	r2, #0
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000db2:	f7ff fdc5 	bl	8000940 <__aeabi_dcmplt>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01d      	beq.n	8000df8 <motor_control+0x11c>
	{
		HAL_GPIO_WritePin(INT1_GPIO_Port, INT1_Pin, 1);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	4828      	ldr	r0, [pc, #160]	; (8000e64 <motor_control+0x188>)
 8000dc2:	f001 fa5e 	bl	8002282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INT2_GPIO_Port, INT2_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4826      	ldr	r0, [pc, #152]	; (8000e64 <motor_control+0x188>)
 8000dcc:	f001 fa59 	bl	8002282 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, -ARR*pos_right);
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	425b      	negs	r3, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fce9 	bl	80007ac <__aeabi_i2d>
 8000dda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dde:	f7ff f9b5 	bl	800014c <__aeabi_dmul>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4921      	ldr	r1, [pc, #132]	; (8000e6c <motor_control+0x190>)
 8000de8:	680c      	ldr	r4, [r1, #0]
 8000dea:	4610      	mov	r0, r2
 8000dec:	4619      	mov	r1, r3
 8000dee:	f7ff fdcf 	bl	8000990 <__aeabi_d2uiz>
 8000df2:	4603      	mov	r3, r0
 8000df4:	6363      	str	r3, [r4, #52]	; 0x34
	else
	{
		HAL_GPIO_WritePin(INT1_GPIO_Port, INT1_Pin, 0);
		HAL_GPIO_WritePin(INT2_GPIO_Port, INT2_Pin, 0);
	}
}
 8000df6:	e031      	b.n	8000e5c <motor_control+0x180>
	else if (pos_right > 0)
 8000df8:	f04f 0200 	mov.w	r2, #0
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e04:	f7ff fdba 	bl	800097c <__aeabi_dcmpgt>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d01c      	beq.n	8000e48 <motor_control+0x16c>
		HAL_GPIO_WritePin(INT1_GPIO_Port, INT1_Pin, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2120      	movs	r1, #32
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <motor_control+0x188>)
 8000e14:	f001 fa35 	bl	8002282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INT2_GPIO_Port, INT2_Pin, 1);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <motor_control+0x188>)
 8000e1e:	f001 fa30 	bl	8002282 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, ARR*pos_right);
 8000e22:	230a      	movs	r3, #10
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fcc1 	bl	80007ac <__aeabi_i2d>
 8000e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e2e:	f7ff f98d 	bl	800014c <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <motor_control+0x190>)
 8000e38:	680c      	ldr	r4, [r1, #0]
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fda7 	bl	8000990 <__aeabi_d2uiz>
 8000e42:	4603      	mov	r3, r0
 8000e44:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000e46:	e009      	b.n	8000e5c <motor_control+0x180>
		HAL_GPIO_WritePin(INT1_GPIO_Port, INT1_Pin, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <motor_control+0x188>)
 8000e4e:	f001 fa18 	bl	8002282 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INT2_GPIO_Port, INT2_Pin, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2110      	movs	r1, #16
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <motor_control+0x188>)
 8000e58:	f001 fa13 	bl	8002282 <HAL_GPIO_WritePin>
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	20000080 	.word	0x20000080

08000e70 <finish_line>:
			motor_control(70, -53);
	}
}*/

void finish_line()
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	if (last_idle > 25)
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <finish_line+0x24>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b19      	cmp	r3, #25
 8000e7a:	dd09      	ble.n	8000e90 <finish_line+0x20>
		motor_control(0,0);
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	f04f 0300 	mov.w	r3, #0
 8000e84:	f04f 0000 	mov.w	r0, #0
 8000e88:	f04f 0100 	mov.w	r1, #0
 8000e8c:	f7ff ff26 	bl	8000cdc <motor_control>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000158 	.word	0x20000158

08000e98 <QTR8_read>:

int QTR8_read ()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 1);

	Set_Pin_Output(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	486b      	ldr	r0, [pc, #428]	; (8001050 <QTR8_read+0x1b8>)
 8000ea2:	f7ff fee1 	bl	8000c68 <Set_Pin_Output>
	Set_Pin_Output(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	4869      	ldr	r0, [pc, #420]	; (8001050 <QTR8_read+0x1b8>)
 8000eaa:	f7ff fedd 	bl	8000c68 <Set_Pin_Output>
	Set_Pin_Output(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8000eae:	2120      	movs	r1, #32
 8000eb0:	4867      	ldr	r0, [pc, #412]	; (8001050 <QTR8_read+0x1b8>)
 8000eb2:	f7ff fed9 	bl	8000c68 <Set_Pin_Output>
	Set_Pin_Output(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4865      	ldr	r0, [pc, #404]	; (8001050 <QTR8_read+0x1b8>)
 8000eba:	f7ff fed5 	bl	8000c68 <Set_Pin_Output>
	Set_Pin_Output(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4863      	ldr	r0, [pc, #396]	; (8001050 <QTR8_read+0x1b8>)
 8000ec2:	f7ff fed1 	bl	8000c68 <Set_Pin_Output>
	//Set_Pin_Output(SENSOR6_GPIO_Port, SENSOR6_Pin);
	//Set_Pin_Output(SENSOR7_GPIO_Port, SENSOR7_Pin);
	//Set_Pin_Output(SENSOR8_GPIO_Port, SENSOR8_Pin);

	HAL_GPIO_WritePin (SENSOR1_GPIO_Port, SENSOR1_Pin, 1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	4861      	ldr	r0, [pc, #388]	; (8001050 <QTR8_read+0x1b8>)
 8000ecc:	f001 f9d9 	bl	8002282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR2_GPIO_Port, SENSOR2_Pin, 1);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	485e      	ldr	r0, [pc, #376]	; (8001050 <QTR8_read+0x1b8>)
 8000ed6:	f001 f9d4 	bl	8002282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR3_GPIO_Port, SENSOR3_Pin, 1);
 8000eda:	2201      	movs	r2, #1
 8000edc:	2120      	movs	r1, #32
 8000ede:	485c      	ldr	r0, [pc, #368]	; (8001050 <QTR8_read+0x1b8>)
 8000ee0:	f001 f9cf 	bl	8002282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR4_GPIO_Port, SENSOR4_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	4859      	ldr	r0, [pc, #356]	; (8001050 <QTR8_read+0x1b8>)
 8000eea:	f001 f9ca 	bl	8002282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (SENSOR5_GPIO_Port, SENSOR5_Pin, 1);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4857      	ldr	r0, [pc, #348]	; (8001050 <QTR8_read+0x1b8>)
 8000ef4:	f001 f9c5 	bl	8002282 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin (SENSOR6_GPIO_Port, SENSOR6_Pin, 1);
	//HAL_GPIO_WritePin (SENSOR7_GPIO_Port, SENSOR7_Pin, 1);
	//HAL_GPIO_WritePin (SENSOR8_GPIO_Port, SENSOR8_Pin, 1);

	delay_us(12);
 8000ef8:	200c      	movs	r0, #12
 8000efa:	f7ff fe9d 	bl	8000c38 <delay_us>

	Set_Pin_Input(SENSOR1_GPIO_Port, SENSOR1_Pin);
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	4853      	ldr	r0, [pc, #332]	; (8001050 <QTR8_read+0x1b8>)
 8000f02:	f7ff fece 	bl	8000ca2 <Set_Pin_Input>
	Set_Pin_Input(SENSOR2_GPIO_Port, SENSOR2_Pin);
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	4851      	ldr	r0, [pc, #324]	; (8001050 <QTR8_read+0x1b8>)
 8000f0a:	f7ff feca 	bl	8000ca2 <Set_Pin_Input>
	Set_Pin_Input(SENSOR3_GPIO_Port, SENSOR3_Pin);
 8000f0e:	2120      	movs	r1, #32
 8000f10:	484f      	ldr	r0, [pc, #316]	; (8001050 <QTR8_read+0x1b8>)
 8000f12:	f7ff fec6 	bl	8000ca2 <Set_Pin_Input>
	Set_Pin_Input(SENSOR4_GPIO_Port, SENSOR4_Pin);
 8000f16:	2110      	movs	r1, #16
 8000f18:	484d      	ldr	r0, [pc, #308]	; (8001050 <QTR8_read+0x1b8>)
 8000f1a:	f7ff fec2 	bl	8000ca2 <Set_Pin_Input>
	Set_Pin_Input(SENSOR5_GPIO_Port, SENSOR5_Pin);
 8000f1e:	2108      	movs	r1, #8
 8000f20:	484b      	ldr	r0, [pc, #300]	; (8001050 <QTR8_read+0x1b8>)
 8000f22:	f7ff febe 	bl	8000ca2 <Set_Pin_Input>
	//Set_Pin_Input(SENSOR6_GPIO_Port, SENSOR6_Pin);
	//Set_Pin_Input(SENSOR7_GPIO_Port, SENSOR7_Pin);
	//Set_Pin_Input(SENSOR8_GPIO_Port, SENSOR8_Pin);

	// Threshold
	delay_us(6000);
 8000f26:	f241 7070 	movw	r0, #6000	; 0x1770
 8000f2a:	f7ff fe85 	bl	8000c38 <delay_us>

	sensor_read = 0x00000;
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <QTR8_read+0x1bc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
	int pos = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
	int active = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	603b      	str	r3, [r7, #0]

	if (HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) {
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	4844      	ldr	r0, [pc, #272]	; (8001050 <QTR8_read+0x1b8>)
 8000f40:	f001 f988 	bl	8002254 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d00f      	beq.n	8000f6a <QTR8_read+0xd2>
		sensor_read |= 0x00001;
 8000f4a:	4b42      	ldr	r3, [pc, #264]	; (8001054 <QTR8_read+0x1bc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	4a40      	ldr	r2, [pc, #256]	; (8001054 <QTR8_read+0x1bc>)
 8000f54:	6013      	str	r3, [r2, #0]
		pos += 1000;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f5c:	607b      	str	r3, [r7, #4]
    active++;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3301      	adds	r3, #1
 8000f62:	603b      	str	r3, [r7, #0]
		last_end = 1;
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <QTR8_read+0x1c0>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) {
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	4838      	ldr	r0, [pc, #224]	; (8001050 <QTR8_read+0x1b8>)
 8000f6e:	f001 f971 	bl	8002254 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00c      	beq.n	8000f92 <QTR8_read+0xfa>
		sensor_read |= 0x00010;
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <QTR8_read+0x1bc>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	4a34      	ldr	r2, [pc, #208]	; (8001054 <QTR8_read+0x1bc>)
 8000f82:	6013      	str	r3, [r2, #0]
		pos += 2000;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f8a:	607b      	str	r3, [r7, #4]
    active++;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin)) {
 8000f92:	2120      	movs	r1, #32
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <QTR8_read+0x1b8>)
 8000f96:	f001 f95d 	bl	8002254 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00c      	beq.n	8000fba <QTR8_read+0x122>
		sensor_read |= 0x00100;
 8000fa0:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <QTR8_read+0x1bc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <QTR8_read+0x1bc>)
 8000faa:	6013      	str	r3, [r2, #0]
		pos += 3000;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000fb2:	607b      	str	r3, [r7, #4]
    active++;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin)) {
 8000fba:	2110      	movs	r1, #16
 8000fbc:	4824      	ldr	r0, [pc, #144]	; (8001050 <QTR8_read+0x1b8>)
 8000fbe:	f001 f949 	bl	8002254 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00c      	beq.n	8000fe2 <QTR8_read+0x14a>
		sensor_read |= 0x01000;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <QTR8_read+0x1bc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <QTR8_read+0x1bc>)
 8000fd2:	6013      	str	r3, [r2, #0]
		pos += 4000;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 8000fda:	607b      	str	r3, [r7, #4]
    active++;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin)) {
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	481a      	ldr	r0, [pc, #104]	; (8001050 <QTR8_read+0x1b8>)
 8000fe6:	f001 f935 	bl	8002254 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d010      	beq.n	8001012 <QTR8_read+0x17a>
		sensor_read |= 0x10000;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <QTR8_read+0x1bc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <QTR8_read+0x1bc>)
 8000ffa:	6013      	str	r3, [r2, #0]
		pos += 5000;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001002:	3308      	adds	r3, #8
 8001004:	607b      	str	r3, [r7, #4]
    active++;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	603b      	str	r3, [r7, #0]
  }
	if (HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin)) {
		sensor_read |= 0x10000000;
		pos += 8000;
    active++*/
		last_end = 0;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <QTR8_read+0x1c0>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
  }

  //HAL_GPIO_WritePin(LEDON_GPIO_Port, LEDON_Pin, 0);

  actives = active;
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <QTR8_read+0x1c4>)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	6013      	str	r3, [r2, #0]
	position = pos/active;
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <QTR8_read+0x1c8>)
 8001022:	6013      	str	r3, [r2, #0]

	if (actives == 0)
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <QTR8_read+0x1c4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <QTR8_read+0x1a0>
		last_idle++;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <QTR8_read+0x1cc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <QTR8_read+0x1cc>)
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e002      	b.n	800103e <QTR8_read+0x1a6>
	else
		last_idle = 0;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <QTR8_read+0x1cc>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]

	return pos/active;
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40010800 	.word	0x40010800
 8001054:	20000114 	.word	0x20000114
 8001058:	20000154 	.word	0x20000154
 800105c:	2000015c 	.word	0x2000015c
 8001060:	20000118 	.word	0x20000118
 8001064:	20000158 	.word	0x20000158

08001068 <forward_brake>:

void forward_brake(int pos_right, int pos_left)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	if (actives == 0)
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <forward_brake+0x3c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <forward_brake+0x18>
		//sharp_turn();
		finish_line();
 800107a:	f7ff fef9 	bl	8000e70 <finish_line>
	else
	  motor_control(pos_right, pos_left);
}
 800107e:	e00d      	b.n	800109c <forward_brake+0x34>
	  motor_control(pos_right, pos_left);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fb93 	bl	80007ac <__aeabi_i2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	6838      	ldr	r0, [r7, #0]
 800108c:	f7ff fb8e 	bl	80007ac <__aeabi_i2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f7ff fe20 	bl	8000cdc <motor_control>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bdb0      	pop	{r4, r5, r7, pc}
 80010a4:	2000015c 	.word	0x2000015c

080010a8 <past_errors>:

void past_errors (int error)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  for (int i = 9; i > 0; i--)
 80010b0:	2309      	movs	r3, #9
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e00b      	b.n	80010ce <past_errors+0x26>
      errors[i] = errors[i-1];
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <past_errors+0x3c>)
 80010bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c0:	4908      	ldr	r1, [pc, #32]	; (80010e4 <past_errors+0x3c>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 9; i > 0; i--)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dcf0      	bgt.n	80010b6 <past_errors+0xe>
  errors[0] = error;
 80010d4:	4a03      	ldr	r2, [pc, #12]	; (80010e4 <past_errors+0x3c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	2000012c 	.word	0x2000012c

080010e8 <errors_sum>:

int errors_sum (int index, int abs)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  int sum = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	e021      	b.n	8001140 <errors_sum+0x58>
  {
    if ((abs == 1) & (errors[i] < 0))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	bf0c      	ite	eq
 8001102:	2301      	moveq	r3, #1
 8001104:	2300      	movne	r3, #0
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4912      	ldr	r1, [pc, #72]	; (8001154 <errors_sum+0x6c>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001110:	0fdb      	lsrs	r3, r3, #31
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4013      	ands	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <errors_sum+0x44>
      sum += -errors[i];
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <errors_sum+0x6c>)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	e006      	b.n	800113a <errors_sum+0x52>
    else
      sum += errors[i];
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <errors_sum+0x6c>)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < index; i++)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbd9      	blt.n	80010fc <errors_sum+0x14>
  }
  return sum;
 8001148:	68fb      	ldr	r3, [r7, #12]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr
 8001154:	2000012c 	.word	0x2000012c

08001158 <PID_control>:

void PID_control() {
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
	uint16_t position = QTR8_read();
 800115e:	f7ff fe9b 	bl	8000e98 <QTR8_read>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
  int error = 2250 - position;
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	f5c3 630c 	rsb	r3, r3, #2240	; 0x8c0
 800116c:	330a      	adds	r3, #10
 800116e:	60bb      	str	r3, [r7, #8]
	past_errors(error);
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff ff99 	bl	80010a8 <past_errors>

  P = error;
 8001176:	4a35      	ldr	r2, [pc, #212]	; (800124c <PID_control+0xf4>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	6013      	str	r3, [r2, #0]
  I = errors_sum(5, 0);
 800117c:	2100      	movs	r1, #0
 800117e:	2005      	movs	r0, #5
 8001180:	f7ff ffb2 	bl	80010e8 <errors_sum>
 8001184:	4603      	mov	r3, r0
 8001186:	4a32      	ldr	r2, [pc, #200]	; (8001250 <PID_control+0xf8>)
 8001188:	6013      	str	r3, [r2, #0]
  D = error - lastError;
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <PID_control+0xfc>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <PID_control+0x100>)
 8001194:	6013      	str	r3, [r2, #0]
  //R = errors_sum(5, 1);
  lastError = error;
 8001196:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <PID_control+0xfc>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	6013      	str	r3, [r2, #0]

  int motorspeed = P*Kp + I*Ki + D*Kd;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <PID_control+0xf4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fccf 	bl	8000b44 <__aeabi_i2f>
 80011a6:	4602      	mov	r2, r0
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <PID_control+0x104>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4610      	mov	r0, r2
 80011b0:	f7ff f8f6 	bl	80003a0 <__aeabi_fmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461c      	mov	r4, r3
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <PID_control+0xf8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fcc1 	bl	8000b44 <__aeabi_i2f>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <PID_control+0x108>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	4610      	mov	r0, r2
 80011cc:	f7ff f8e8 	bl	80003a0 <__aeabi_fmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7ff fc01 	bl	80009dc <__addsf3>
 80011da:	4603      	mov	r3, r0
 80011dc:	461c      	mov	r4, r3
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <PID_control+0x100>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fcae 	bl	8000b44 <__aeabi_i2f>
 80011e8:	4602      	mov	r2, r0
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <PID_control+0x10c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f7ff f8d5 	bl	80003a0 <__aeabi_fmul>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4619      	mov	r1, r3
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff fbee 	bl	80009dc <__addsf3>
 8001200:	4603      	mov	r3, r0
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff fcf2 	bl	8000bec <__aeabi_f2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	607b      	str	r3, [r7, #4]

  int motorspeedl = basespeedl + motorspeed /*- R*Kr*/;
 800120c:	235c      	movs	r3, #92	; 0x5c
 800120e:	461a      	mov	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	617b      	str	r3, [r7, #20]
  int motorspeedr = basespeedr - motorspeed /*- R*Kr*/;
 8001216:	235c      	movs	r3, #92	; 0x5c
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	613b      	str	r3, [r7, #16]

  if (motorspeedl > maxspeedl)
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	461a      	mov	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	4293      	cmp	r3, r2
 8001228:	dd01      	ble.n	800122e <PID_control+0xd6>
    motorspeedl = maxspeedl;
 800122a:	2364      	movs	r3, #100	; 0x64
 800122c:	617b      	str	r3, [r7, #20]
  if (motorspeedr > maxspeedr)
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	461a      	mov	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4293      	cmp	r3, r2
 8001236:	dd01      	ble.n	800123c <PID_control+0xe4>
    motorspeedr = maxspeedr;
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	613b      	str	r3, [r7, #16]

	forward_brake(motorspeedr, motorspeedl);
 800123c:	6979      	ldr	r1, [r7, #20]
 800123e:	6938      	ldr	r0, [r7, #16]
 8001240:	f7ff ff12 	bl	8001068 <forward_brake>
}
 8001244:	bf00      	nop
 8001246:	371c      	adds	r7, #28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	2000011c 	.word	0x2000011c
 8001250:	20000120 	.word	0x20000120
 8001254:	20000128 	.word	0x20000128
 8001258:	20000124 	.word	0x20000124
 800125c:	20000004 	.word	0x20000004
 8001260:	20000008 	.word	0x20000008
 8001264:	2000000c 	.word	0x2000000c

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fc2a 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f82e 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 f964 	bl	8001540 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001278:	f000 f938 	bl	80014ec <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800127c:	f000 f8b4 	bl	80013e8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001280:	f000 f862 	bl	8001348 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive
 8001284:	2201      	movs	r2, #1
 8001286:	490d      	ldr	r1, [pc, #52]	; (80012bc <main+0x54>)
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <main+0x58>)
 800128a:	f002 fa92 	bl	80037b2 <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start(&htim1);
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <main+0x5c>)
 8001290:	f001 fc7a 	bl	8002b88 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001294:	2100      	movs	r1, #0
 8001296:	480c      	ldr	r0, [pc, #48]	; (80012c8 <main+0x60>)
 8001298:	f001 fd18 	bl	8002ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800129c:	2104      	movs	r1, #4
 800129e:	480a      	ldr	r0, [pc, #40]	; (80012c8 <main+0x60>)
 80012a0:	f001 fd14 	bl	8002ccc <HAL_TIM_PWM_Start>

  HAL_Delay(2000);
 80012a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a8:	f000 fc6e 	bl	8001b88 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (line_follow==1)
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <main+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d1fb      	bne.n	80012ac <main+0x44>
		  PID_control();
 80012b4:	f7ff ff50 	bl	8001158 <PID_control>
	  if (line_follow==1)
 80012b8:	e7f8      	b.n	80012ac <main+0x44>
 80012ba:	bf00      	nop
 80012bc:	2000010c 	.word	0x2000010c
 80012c0:	200000c8 	.word	0x200000c8
 80012c4:	20000038 	.word	0x20000038
 80012c8:	20000080 	.word	0x20000080
 80012cc:	20000110 	.word	0x20000110

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b090      	sub	sp, #64	; 0x40
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fe9a 	bl	8004018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f6:	2301      	movs	r3, #1
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fa:	2310      	movs	r3, #16
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4618      	mov	r0, r3
 8001308:	f000 ffd4 	bl	80022b4 <HAL_RCC_OscConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001312:	f000 fa89 	bl	8001828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fa42 	bl	80027b8 <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800133a:	f000 fa75 	bl	8001828 <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3740      	adds	r7, #64	; 0x40
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_TIM1_Init+0x98>)
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <MX_TIM1_Init+0x9c>)
 8001368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MX_TIM1_Init+0x98>)
 800136c:	2247      	movs	r2, #71	; 0x47
 800136e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_TIM1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <MX_TIM1_Init+0x98>)
 8001378:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800137c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_TIM1_Init+0x98>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_TIM1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM1_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <MX_TIM1_Init+0x98>)
 8001392:	f001 fba9 	bl	8002ae8 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800139c:	f000 fa44 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	4619      	mov	r1, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_TIM1_Init+0x98>)
 80013ae:	f001 fded 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013b8:	f000 fa36 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_TIM1_Init+0x98>)
 80013ca:	f002 f947 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013d4:	f000 fa28 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000038 	.word	0x20000038
 80013e4:	40012c00 	.word	0x40012c00

080013e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001418:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <MX_TIM4_Init+0xfc>)
 800141a:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <MX_TIM4_Init+0x100>)
 800141c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <MX_TIM4_Init+0xfc>)
 8001420:	224f      	movs	r2, #79	; 0x4f
 8001422:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <MX_TIM4_Init+0xfc>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <MX_TIM4_Init+0xfc>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <MX_TIM4_Init+0xfc>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <MX_TIM4_Init+0xfc>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800143e:	4829      	ldr	r0, [pc, #164]	; (80014e4 <MX_TIM4_Init+0xfc>)
 8001440:	f001 fb52 	bl	8002ae8 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800144a:	f000 f9ed 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001458:	4619      	mov	r1, r3
 800145a:	4822      	ldr	r0, [pc, #136]	; (80014e4 <MX_TIM4_Init+0xfc>)
 800145c:	f001 fd96 	bl	8002f8c <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001466:	f000 f9df 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_TIM4_Init+0xfc>)
 800146c:	f001 fbd6 	bl	8002c1c <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001476:	f000 f9d7 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_TIM4_Init+0xfc>)
 800148a:	f002 f8e7 	bl	800365c <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001494:	f000 f9c8 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_TIM4_Init+0xfc>)
 80014b0:	f001 fcae 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80014ba:	f000 f9b5 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2204      	movs	r2, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM4_Init+0xfc>)
 80014c6:	f001 fca3 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80014d0:	f000 f9aa 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014d4:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_TIM4_Init+0xfc>)
 80014d6:	f000 fa11 	bl	80018fc <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3738      	adds	r7, #56	; 0x38
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000080 	.word	0x20000080
 80014e8:	40000800 	.word	0x40000800

080014ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 80014f2:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_USART1_UART_Init+0x50>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 80014f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_USART1_UART_Init+0x4c>)
 8001524:	f002 f8f8 	bl	8003718 <HAL_UART_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152e:	f000 f97b 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200000c8 	.word	0x200000c8
 800153c:	40013800 	.word	0x40013800

08001540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <MX_GPIO_Init+0xe0>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	4a31      	ldr	r2, [pc, #196]	; (8001620 <MX_GPIO_Init+0xe0>)
 800155a:	f043 0310 	orr.w	r3, r3, #16
 800155e:	6193      	str	r3, [r2, #24]
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <MX_GPIO_Init+0xe0>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <MX_GPIO_Init+0xe0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a2b      	ldr	r2, [pc, #172]	; (8001620 <MX_GPIO_Init+0xe0>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_GPIO_Init+0xe0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_GPIO_Init+0xe0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <MX_GPIO_Init+0xe0>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <MX_GPIO_Init+0xe0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	4820      	ldr	r0, [pc, #128]	; (8001624 <MX_GPIO_Init+0xe4>)
 80015a4:	f000 fe6d 	bl	8002282 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin
 80015a8:	2200      	movs	r2, #0
 80015aa:	f248 01f8 	movw	r1, #33016	; 0x80f8
 80015ae:	481e      	ldr	r0, [pc, #120]	; (8001628 <MX_GPIO_Init+0xe8>)
 80015b0:	f000 fe67 	bl	8002282 <HAL_GPIO_WritePin>
                          |SENSOR1_Pin|INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INT3_Pin|INT2_Pin|INT1_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2138      	movs	r1, #56	; 0x38
 80015b8:	481c      	ldr	r0, [pc, #112]	; (800162c <MX_GPIO_Init+0xec>)
 80015ba:	f000 fe62 	bl	8002282 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2302      	movs	r3, #2
 80015ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4619      	mov	r1, r3
 80015d6:	4813      	ldr	r0, [pc, #76]	; (8001624 <MX_GPIO_Init+0xe4>)
 80015d8:	f000 fcb8 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR4_Pin SENSOR3_Pin SENSOR2_Pin
                           SENSOR1_Pin INT4_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin
 80015dc:	f248 03f8 	movw	r3, #33016	; 0x80f8
 80015e0:	613b      	str	r3, [r7, #16]
                          |SENSOR1_Pin|INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4619      	mov	r1, r3
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <MX_GPIO_Init+0xe8>)
 80015f6:	f000 fca9 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT3_Pin INT2_Pin INT1_Pin */
  GPIO_InitStruct.Pin = INT3_Pin|INT2_Pin|INT1_Pin;
 80015fa:	2338      	movs	r3, #56	; 0x38
 80015fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2302      	movs	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4619      	mov	r1, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <MX_GPIO_Init+0xec>)
 8001612:	f000 fc9b 	bl	8001f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	40011000 	.word	0x40011000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00

08001630 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a73      	ldr	r2, [pc, #460]	; (800180c <HAL_UART_RxCpltCallback+0x1dc>)
 800163e:	4293      	cmp	r3, r2
 8001640:	f040 80df 	bne.w	8001802 <HAL_UART_RxCpltCallback+0x1d2>
  {
	  if (rxData>47 && rxData<57) // '0'-'9'
 8001644:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b2f      	cmp	r3, #47	; 0x2f
 800164a:	d91f      	bls.n	800168c <HAL_UART_RxCpltCallback+0x5c>
 800164c:	4b70      	ldr	r3, [pc, #448]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b38      	cmp	r3, #56	; 0x38
 8001652:	d81b      	bhi.n	800168c <HAL_UART_RxCpltCallback+0x5c>
	  {
		  speed=10*(rxData-48);
 8001654:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	461a      	mov	r2, r3
 8001666:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 8001668:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, ARR*speed);
 800166a:	220a      	movs	r2, #10
 800166c:	4b69      	ldr	r3, [pc, #420]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	fb03 f202 	mul.w	r2, r3, r2
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_UART_RxCpltCallback+0x1e8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, ARR*speed);
 800167a:	220a      	movs	r2, #10
 800167c:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fb03 f202 	mul.w	r2, r3, r2
 8001684:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_UART_RxCpltCallback+0x1e8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
 800168a:	e0b5      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else if (rxData==113) //'q'
 800168c:	4b60      	ldr	r3, [pc, #384]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b71      	cmp	r3, #113	; 0x71
 8001692:	d113      	bne.n	80016bc <HAL_UART_RxCpltCallback+0x8c>
	  {
		  speed=100;
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 8001696:	2264      	movs	r2, #100	; 0x64
 8001698:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_1, ARR*speed);
 800169a:	220a      	movs	r2, #10
 800169c:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	fb03 f202 	mul.w	r2, r3, r2
 80016a4:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_UART_RxCpltCallback+0x1e8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE (&htim4, TIM_CHANNEL_2, ARR*speed);
 80016aa:	220a      	movs	r2, #10
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fb03 f202 	mul.w	r2, r3, r2
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_UART_RxCpltCallback+0x1e8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ba:	e09d      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else if (rxData==70) // 'F'
 80016bc:	4b54      	ldr	r3, [pc, #336]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b46      	cmp	r3, #70	; 0x46
 80016c2:	d118      	bne.n	80016f6 <HAL_UART_RxCpltCallback+0xc6>
	  {
		  motor_control(speed, speed);
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff f86f 	bl	80007ac <__aeabi_i2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f868 	bl	80007ac <__aeabi_i2d>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7ff fafa 	bl	8000cdc <motor_control>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ee:	484b      	ldr	r0, [pc, #300]	; (800181c <HAL_UART_RxCpltCallback+0x1ec>)
 80016f0:	f000 fdc7 	bl	8002282 <HAL_GPIO_WritePin>
 80016f4:	e080      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else if (rxData==66) // 'B'
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b42      	cmp	r3, #66	; 0x42
 80016fc:	d11a      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x104>
	  {
		  motor_control(-speed, -speed);
 80016fe:	4b45      	ldr	r3, [pc, #276]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	425b      	negs	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff f851 	bl	80007ac <__aeabi_i2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	4b41      	ldr	r3, [pc, #260]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	425b      	negs	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f849 	bl	80007ac <__aeabi_i2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f7ff fadb 	bl	8000cdc <motor_control>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	483b      	ldr	r0, [pc, #236]	; (800181c <HAL_UART_RxCpltCallback+0x1ec>)
 800172e:	f000 fda8 	bl	8002282 <HAL_GPIO_WritePin>
 8001732:	e061      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else if (rxData==76) // 'L'
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b4c      	cmp	r3, #76	; 0x4c
 800173a:	d119      	bne.n	8001770 <HAL_UART_RxCpltCallback+0x140>
	  {
		  motor_control(speed, -speed);
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f833 	bl	80007ac <__aeabi_i2d>
 8001746:	4604      	mov	r4, r0
 8001748:	460d      	mov	r5, r1
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	425b      	negs	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f82b 	bl	80007ac <__aeabi_i2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff fabd 	bl	8000cdc <motor_control>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001768:	482c      	ldr	r0, [pc, #176]	; (800181c <HAL_UART_RxCpltCallback+0x1ec>)
 800176a:	f000 fd8a 	bl	8002282 <HAL_GPIO_WritePin>
 800176e:	e043      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else if (rxData==82) // 'R'
 8001770:	4b27      	ldr	r3, [pc, #156]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b52      	cmp	r3, #82	; 0x52
 8001776:	d119      	bne.n	80017ac <HAL_UART_RxCpltCallback+0x17c>
	  {
		  motor_control(-speed, speed);
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	425b      	negs	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff f814 	bl	80007ac <__aeabi_i2d>
 8001784:	4604      	mov	r4, r0
 8001786:	460d      	mov	r5, r1
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <HAL_UART_RxCpltCallback+0x1e4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f80d 	bl	80007ac <__aeabi_i2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7ff fa9f 	bl	8000cdc <motor_control>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	481d      	ldr	r0, [pc, #116]	; (800181c <HAL_UART_RxCpltCallback+0x1ec>)
 80017a6:	f000 fd6c 	bl	8002282 <HAL_GPIO_WritePin>
 80017aa:	e025      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else if (rxData==120) // Ascii value of 'x'
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b78      	cmp	r3, #120	; 0x78
 80017b2:	d109      	bne.n	80017c8 <HAL_UART_RxCpltCallback+0x198>
	  {
		  line_follow = 0;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_UART_RxCpltCallback+0x1f0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4816      	ldr	r0, [pc, #88]	; (800181c <HAL_UART_RxCpltCallback+0x1ec>)
 80017c2:	f000 fd5e 	bl	8002282 <HAL_GPIO_WritePin>
 80017c6:	e017      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>

	  }
	  else if (rxData==88) // Ascii value of 'X'
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b58      	cmp	r3, #88	; 0x58
 80017ce:	d109      	bne.n	80017e4 <HAL_UART_RxCpltCallback+0x1b4>
	  {
	      line_follow = 1;
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_UART_RxCpltCallback+0x1f0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017dc:	480f      	ldr	r0, [pc, #60]	; (800181c <HAL_UART_RxCpltCallback+0x1ec>)
 80017de:	f000 fd50 	bl	8002282 <HAL_GPIO_WritePin>
 80017e2:	e009      	b.n	80017f8 <HAL_UART_RxCpltCallback+0x1c8>
	  }
	  else
	  {
		  motor_control(0, 0);
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	f04f 0000 	mov.w	r0, #0
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	f7ff fa72 	bl	8000cdc <motor_control>
	  }
  HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 80017f8:	2201      	movs	r2, #1
 80017fa:	4905      	ldr	r1, [pc, #20]	; (8001810 <HAL_UART_RxCpltCallback+0x1e0>)
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <HAL_UART_RxCpltCallback+0x1f4>)
 80017fe:	f001 ffd8 	bl	80037b2 <HAL_UART_Receive_IT>
  }
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bdb0      	pop	{r4, r5, r7, pc}
 800180a:	bf00      	nop
 800180c:	40013800 	.word	0x40013800
 8001810:	2000010c 	.word	0x2000010c
 8001814:	20000000 	.word	0x20000000
 8001818:	20000080 	.word	0x20000080
 800181c:	40011000 	.word	0x40011000
 8001820:	20000110 	.word	0x20000110
 8001824:	200000c8 	.word	0x200000c8

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800182c:	b672      	cpsid	i
}
 800182e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001830:	e7fe      	b.n	8001830 <Error_Handler+0x8>
	...

08001834 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_MspInit+0x5c>)
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_MspInit+0x5c>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6193      	str	r3, [r2, #24]
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_MspInit+0x5c>)
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x5c>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x5c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x5c>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_MspInit+0x60>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_MspInit+0x60>)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_TIM_Base_MspInit+0x58>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10c      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_TIM_Base_MspInit+0x5c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_TIM_Base_MspInit+0x5c>)
 80018b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b4:	6193      	str	r3, [r2, #24]
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_TIM_Base_MspInit+0x5c>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018c2:	e010      	b.n	80018e6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_TIM_Base_MspInit+0x60>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10b      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_TIM_Base_MspInit+0x5c>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_TIM_Base_MspInit+0x5c>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_TIM_Base_MspInit+0x5c>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40000800 	.word	0x40000800

080018fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_TIM_MspPostInit+0x58>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d117      	bne.n	800194c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <HAL_TIM_MspPostInit+0x5c>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <HAL_TIM_MspPostInit+0x5c>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_TIM_MspPostInit+0x5c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENB_Pin|ENA_Pin;
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <HAL_TIM_MspPostInit+0x60>)
 8001948:	f000 fb00 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40000800 	.word	0x40000800
 8001958:	40021000 	.word	0x40021000
 800195c:	40010c00 	.word	0x40010c00

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a20      	ldr	r2, [pc, #128]	; (80019fc <HAL_UART_MspInit+0x9c>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d139      	bne.n	80019f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 8001986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_UART_MspInit+0xa0>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4619      	mov	r1, r3
 80019c4:	480f      	ldr	r0, [pc, #60]	; (8001a04 <HAL_UART_MspInit+0xa4>)
 80019c6:	f000 fac1 	bl	8001f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	4809      	ldr	r0, [pc, #36]	; (8001a04 <HAL_UART_MspInit+0xa4>)
 80019e0:	f000 fab4 	bl	8001f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2025      	movs	r0, #37	; 0x25
 80019ea:	f000 f9c8 	bl	8001d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ee:	2025      	movs	r0, #37	; 0x25
 80019f0:	f000 f9e1 	bl	8001db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <BusFault_Handler+0x4>

08001a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <UsageFault_Handler+0x4>

08001a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4e:	f000 f87f 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <USART1_IRQHandler+0x10>)
 8001a5e:	f001 fed9 	bl	8003814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	200000c8 	.word	0x200000c8

08001a6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480c      	ldr	r0, [pc, #48]	; (8001aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a7a:	490d      	ldr	r1, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a90:	4c0a      	ldr	r4, [pc, #40]	; (8001abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9e:	f7ff ffe5 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f002 fa95 	bl	8003fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa6:	f7ff fbdf 	bl	8001268 <main>
  bx lr
 8001aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001ab4:	08004070 	.word	0x08004070
  ldr r2, =_sbss
 8001ab8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001abc:	20000164 	.word	0x20000164

08001ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ac0:	e7fe      	b.n	8001ac0 <ADC1_2_IRQHandler>
	...

08001ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x28>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f947 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fea8 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f95f 	bl	8001dd2 <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f927 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000010 	.word	0x20000010
 8001b48:	20000018 	.word	0x20000018
 8001b4c:	20000014 	.word	0x20000014

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	20000018 	.word	0x20000018
 8001b70:	20000160 	.word	0x20000160

08001b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	20000160 	.word	0x20000160

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fff0 	bl	8001b74 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffe0 	bl	8001b74 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000018 	.word	0x20000018

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4906      	ldr	r1, [pc, #24]	; (8001c68 <__NVIC_EnableIRQ+0x34>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	; 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	; 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff90 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff2d 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff42 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff90 	bl	8001cc0 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5f 	bl	8001c6c <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff35 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffa2 	bl	8001d24 <SysTick_Config>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d008      	beq.n	8001e12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2204      	movs	r2, #4
 8001e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e020      	b.n	8001e54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 020e 	bic.w	r2, r2, #14
 8001e20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d005      	beq.n	8001e82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e051      	b.n	8001f26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 020e 	bic.w	r2, r2, #14
 8001e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_DMA_Abort_IT+0xd0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d029      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xa0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	; (8001f34 <HAL_DMA_Abort_IT+0xd4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d022      	beq.n	8001efc <HAL_DMA_Abort_IT+0x9c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1f      	ldr	r2, [pc, #124]	; (8001f38 <HAL_DMA_Abort_IT+0xd8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d01a      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x96>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_DMA_Abort_IT+0xdc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d012      	beq.n	8001ef0 <HAL_DMA_Abort_IT+0x90>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_DMA_Abort_IT+0xe0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00a      	beq.n	8001eea <HAL_DMA_Abort_IT+0x8a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_DMA_Abort_IT+0xe4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d102      	bne.n	8001ee4 <HAL_DMA_Abort_IT+0x84>
 8001ede:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee2:	e00e      	b.n	8001f02 <HAL_DMA_Abort_IT+0xa2>
 8001ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ee8:	e00b      	b.n	8001f02 <HAL_DMA_Abort_IT+0xa2>
 8001eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eee:	e008      	b.n	8001f02 <HAL_DMA_Abort_IT+0xa2>
 8001ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef4:	e005      	b.n	8001f02 <HAL_DMA_Abort_IT+0xa2>
 8001ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efa:	e002      	b.n	8001f02 <HAL_DMA_Abort_IT+0xa2>
 8001efc:	2310      	movs	r3, #16
 8001efe:	e000      	b.n	8001f02 <HAL_DMA_Abort_IT+0xa2>
 8001f00:	2301      	movs	r3, #1
 8001f02:	4a11      	ldr	r2, [pc, #68]	; (8001f48 <HAL_DMA_Abort_IT+0xe8>)
 8001f04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
    } 
  }
  return status;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020008 	.word	0x40020008
 8001f34:	4002001c 	.word	0x4002001c
 8001f38:	40020030 	.word	0x40020030
 8001f3c:	40020044 	.word	0x40020044
 8001f40:	40020058 	.word	0x40020058
 8001f44:	4002006c 	.word	0x4002006c
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e169      	b.n	8002234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f60:	2201      	movs	r2, #1
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 8158 	bne.w	800222e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4a9a      	ldr	r2, [pc, #616]	; (80021ec <HAL_GPIO_Init+0x2a0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d05e      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001f88:	4a98      	ldr	r2, [pc, #608]	; (80021ec <HAL_GPIO_Init+0x2a0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d875      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001f8e:	4a98      	ldr	r2, [pc, #608]	; (80021f0 <HAL_GPIO_Init+0x2a4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d058      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001f94:	4a96      	ldr	r2, [pc, #600]	; (80021f0 <HAL_GPIO_Init+0x2a4>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d86f      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001f9a:	4a96      	ldr	r2, [pc, #600]	; (80021f4 <HAL_GPIO_Init+0x2a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d052      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fa0:	4a94      	ldr	r2, [pc, #592]	; (80021f4 <HAL_GPIO_Init+0x2a8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d869      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fa6:	4a94      	ldr	r2, [pc, #592]	; (80021f8 <HAL_GPIO_Init+0x2ac>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d04c      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fac:	4a92      	ldr	r2, [pc, #584]	; (80021f8 <HAL_GPIO_Init+0x2ac>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d863      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fb2:	4a92      	ldr	r2, [pc, #584]	; (80021fc <HAL_GPIO_Init+0x2b0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d046      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
 8001fb8:	4a90      	ldr	r2, [pc, #576]	; (80021fc <HAL_GPIO_Init+0x2b0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d85d      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fbe:	2b12      	cmp	r3, #18
 8001fc0:	d82a      	bhi.n	8002018 <HAL_GPIO_Init+0xcc>
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d859      	bhi.n	800207a <HAL_GPIO_Init+0x12e>
 8001fc6:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_GPIO_Init+0x80>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	08002047 	.word	0x08002047
 8001fd0:	08002021 	.word	0x08002021
 8001fd4:	08002033 	.word	0x08002033
 8001fd8:	08002075 	.word	0x08002075
 8001fdc:	0800207b 	.word	0x0800207b
 8001fe0:	0800207b 	.word	0x0800207b
 8001fe4:	0800207b 	.word	0x0800207b
 8001fe8:	0800207b 	.word	0x0800207b
 8001fec:	0800207b 	.word	0x0800207b
 8001ff0:	0800207b 	.word	0x0800207b
 8001ff4:	0800207b 	.word	0x0800207b
 8001ff8:	0800207b 	.word	0x0800207b
 8001ffc:	0800207b 	.word	0x0800207b
 8002000:	0800207b 	.word	0x0800207b
 8002004:	0800207b 	.word	0x0800207b
 8002008:	0800207b 	.word	0x0800207b
 800200c:	0800207b 	.word	0x0800207b
 8002010:	08002029 	.word	0x08002029
 8002014:	0800203d 	.word	0x0800203d
 8002018:	4a79      	ldr	r2, [pc, #484]	; (8002200 <HAL_GPIO_Init+0x2b4>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800201e:	e02c      	b.n	800207a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	623b      	str	r3, [r7, #32]
          break;
 8002026:	e029      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	3304      	adds	r3, #4
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e024      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	3308      	adds	r3, #8
 8002038:	623b      	str	r3, [r7, #32]
          break;
 800203a:	e01f      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	330c      	adds	r3, #12
 8002042:	623b      	str	r3, [r7, #32]
          break;
 8002044:	e01a      	b.n	800207c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800204e:	2304      	movs	r3, #4
 8002050:	623b      	str	r3, [r7, #32]
          break;
 8002052:	e013      	b.n	800207c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	611a      	str	r2, [r3, #16]
          break;
 8002066:	e009      	b.n	800207c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002068:	2308      	movs	r3, #8
 800206a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	615a      	str	r2, [r3, #20]
          break;
 8002072:	e003      	b.n	800207c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
          break;
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x130>
          break;
 800207a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	2bff      	cmp	r3, #255	; 0xff
 8002080:	d801      	bhi.n	8002086 <HAL_GPIO_Init+0x13a>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	e001      	b.n	800208a <HAL_GPIO_Init+0x13e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2bff      	cmp	r3, #255	; 0xff
 8002090:	d802      	bhi.n	8002098 <HAL_GPIO_Init+0x14c>
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	e002      	b.n	800209e <HAL_GPIO_Init+0x152>
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	3b08      	subs	r3, #8
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	210f      	movs	r1, #15
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	401a      	ands	r2, r3
 80020b0:	6a39      	ldr	r1, [r7, #32]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	431a      	orrs	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80b1 	beq.w	800222e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <HAL_GPIO_Init+0x2b8>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020e4:	4a48      	ldr	r2, [pc, #288]	; (8002208 <HAL_GPIO_Init+0x2bc>)
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a40      	ldr	r2, [pc, #256]	; (800220c <HAL_GPIO_Init+0x2c0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d013      	beq.n	8002138 <HAL_GPIO_Init+0x1ec>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3f      	ldr	r2, [pc, #252]	; (8002210 <HAL_GPIO_Init+0x2c4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d00d      	beq.n	8002134 <HAL_GPIO_Init+0x1e8>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3e      	ldr	r2, [pc, #248]	; (8002214 <HAL_GPIO_Init+0x2c8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d007      	beq.n	8002130 <HAL_GPIO_Init+0x1e4>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <HAL_GPIO_Init+0x2cc>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d101      	bne.n	800212c <HAL_GPIO_Init+0x1e0>
 8002128:	2303      	movs	r3, #3
 800212a:	e006      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 800212c:	2304      	movs	r3, #4
 800212e:	e004      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002130:	2302      	movs	r3, #2
 8002132:	e002      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_GPIO_Init+0x1ee>
 8002138:	2300      	movs	r3, #0
 800213a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213c:	f002 0203 	and.w	r2, r2, #3
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	4093      	lsls	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800214a:	492f      	ldr	r1, [pc, #188]	; (8002208 <HAL_GPIO_Init+0x2bc>)
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	089b      	lsrs	r3, r3, #2
 8002150:	3302      	adds	r3, #2
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	492c      	ldr	r1, [pc, #176]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002172:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	43db      	mvns	r3, r3
 800217a:	4928      	ldr	r1, [pc, #160]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800217c:	4013      	ands	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4922      	ldr	r1, [pc, #136]	; (800221c <HAL_GPIO_Init+0x2d0>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_GPIO_Init+0x2d0>)
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	491e      	ldr	r1, [pc, #120]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4918      	ldr	r1, [pc, #96]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]
 80021c0:	e006      	b.n	80021d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4914      	ldr	r1, [pc, #80]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d021      	beq.n	8002220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	490e      	ldr	r1, [pc, #56]	; (800221c <HAL_GPIO_Init+0x2d0>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60cb      	str	r3, [r1, #12]
 80021e8:	e021      	b.n	800222e <HAL_GPIO_Init+0x2e2>
 80021ea:	bf00      	nop
 80021ec:	10320000 	.word	0x10320000
 80021f0:	10310000 	.word	0x10310000
 80021f4:	10220000 	.word	0x10220000
 80021f8:	10210000 	.word	0x10210000
 80021fc:	10120000 	.word	0x10120000
 8002200:	10110000 	.word	0x10110000
 8002204:	40021000 	.word	0x40021000
 8002208:	40010000 	.word	0x40010000
 800220c:	40010800 	.word	0x40010800
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40011000 	.word	0x40011000
 8002218:	40011400 	.word	0x40011400
 800221c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	43db      	mvns	r3, r3
 8002228:	4909      	ldr	r1, [pc, #36]	; (8002250 <HAL_GPIO_Init+0x304>)
 800222a:	4013      	ands	r3, r2
 800222c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	3301      	adds	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	f47f ae8e 	bne.w	8001f60 <HAL_GPIO_Init+0x14>
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	372c      	adds	r7, #44	; 0x2c
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40010400 	.word	0x40010400

08002254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e001      	b.n	8002276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	807b      	strh	r3, [r7, #2]
 800228e:	4613      	mov	r3, r2
 8002290:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002292:	787b      	ldrb	r3, [r7, #1]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002298:	887a      	ldrh	r2, [r7, #2]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800229e:	e003      	b.n	80022a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022a0:	887b      	ldrh	r3, [r7, #2]
 80022a2:	041a      	lsls	r2, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	611a      	str	r2, [r3, #16]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e272      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8087 	beq.w	80023e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022d4:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d00c      	beq.n	80022fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022e0:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d112      	bne.n	8002312 <HAL_RCC_OscConfig+0x5e>
 80022ec:	4b8c      	ldr	r3, [pc, #560]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d10b      	bne.n	8002312 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06c      	beq.n	80023e0 <HAL_RCC_OscConfig+0x12c>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d168      	bne.n	80023e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e24c      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x76>
 800231c:	4b80      	ldr	r3, [pc, #512]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7f      	ldr	r2, [pc, #508]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e02e      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_RCC_OscConfig+0x98>
 8002332:	4b7b      	ldr	r3, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a7a      	ldr	r2, [pc, #488]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	4b78      	ldr	r3, [pc, #480]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a77      	ldr	r2, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	e01d      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002354:	d10c      	bne.n	8002370 <HAL_RCC_OscConfig+0xbc>
 8002356:	4b72      	ldr	r3, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a71      	ldr	r2, [pc, #452]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e00b      	b.n	8002388 <HAL_RCC_OscConfig+0xd4>
 8002370:	4b6b      	ldr	r3, [pc, #428]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6a      	ldr	r2, [pc, #424]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b68      	ldr	r3, [pc, #416]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a67      	ldr	r2, [pc, #412]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002386:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fbf0 	bl	8001b74 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff fbec 	bl	8001b74 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e200      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0xe4>
 80023b6:	e014      	b.n	80023e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff fbdc 	bl	8001b74 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff fbd8 	bl	8001b74 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1ec      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x10c>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ee:	4b4c      	ldr	r3, [pc, #304]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023fa:	4b49      	ldr	r3, [pc, #292]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b08      	cmp	r3, #8
 8002404:	d11c      	bne.n	8002440 <HAL_RCC_OscConfig+0x18c>
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d116      	bne.n	8002440 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x176>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d001      	beq.n	800242a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e1c0      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4939      	ldr	r1, [pc, #228]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d020      	beq.n	800248a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800244a:	2201      	movs	r2, #1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244e:	f7ff fb91 	bl	8001b74 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002456:	f7ff fb8d 	bl	8001b74 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e1a1      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4927      	ldr	r1, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e015      	b.n	80024b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800248a:	4b26      	ldr	r3, [pc, #152]	; (8002524 <HAL_RCC_OscConfig+0x270>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fb70 	bl	8001b74 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff fb6c 	bl	8001b74 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e180      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d03a      	beq.n	8002538 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d019      	beq.n	80024fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7ff fb50 	bl	8001b74 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7ff fb4c 	bl	8001b74 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e160      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f000 fad8 	bl	8002aac <RCC_Delay>
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_OscConfig+0x274>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7ff fb36 	bl	8001b74 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250a:	e00f      	b.n	800252c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250c:	f7ff fb32 	bl	8001b74 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d908      	bls.n	800252c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e146      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	42420000 	.word	0x42420000
 8002528:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e9      	bne.n	800250c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80a6 	beq.w	8002692 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10d      	bne.n	8002572 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a87      	ldr	r2, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256e:	2301      	movs	r3, #1
 8002570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002572:	4b82      	ldr	r3, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d118      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a7e      	ldr	r2, [pc, #504]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 8002584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff faf3 	bl	8001b74 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002592:	f7ff faef 	bl	8001b74 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e103      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCC_OscConfig+0x4c8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x312>
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	e02d      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x334>
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	4a69      	ldr	r2, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	6213      	str	r3, [r2, #32]
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a66      	ldr	r2, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	e01c      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d10c      	bne.n	800260a <HAL_RCC_OscConfig+0x356>
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025f6:	f043 0304 	orr.w	r3, r3, #4
 80025fa:	6213      	str	r3, [r2, #32]
 80025fc:	4b5e      	ldr	r3, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a5d      	ldr	r2, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	e00b      	b.n	8002622 <HAL_RCC_OscConfig+0x36e>
 800260a:	4b5b      	ldr	r3, [pc, #364]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	f023 0304 	bic.w	r3, r3, #4
 8002620:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d015      	beq.n	8002656 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7ff faa3 	bl	8001b74 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002632:	f7ff fa9f 	bl	8001b74 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0b1      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ee      	beq.n	8002632 <HAL_RCC_OscConfig+0x37e>
 8002654:	e014      	b.n	8002680 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002656:	f7ff fa8d 	bl	8001b74 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7ff fa89 	bl	8001b74 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e09b      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d105      	bne.n	8002692 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a3b      	ldr	r2, [pc, #236]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8087 	beq.w	80027aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d061      	beq.n	800276c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d146      	bne.n	800273e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fa5d 	bl	8001b74 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7ff fa59 	bl	8001b74 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e06d      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	4b29      	ldr	r3, [pc, #164]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d108      	bne.n	80026f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a19      	ldr	r1, [r3, #32]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	430b      	orrs	r3, r1
 800270a:	491b      	ldr	r1, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002710:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7ff fa2d 	bl	8001b74 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271e:	f7ff fa29 	bl	8001b74 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e03d      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x46a>
 800273c:	e035      	b.n	80027aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x4cc>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7ff fa16 	bl	8001b74 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7ff fa12 	bl	8001b74 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e026      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x498>
 800276a:	e01e      	b.n	80027aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e019      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
 8002778:	40021000 	.word	0x40021000
 800277c:	40007000 	.word	0x40007000
 8002780:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_OscConfig+0x500>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0d0      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d910      	bls.n	80027fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 0207 	bic.w	r2, r3, #7
 80027e2:	4965      	ldr	r1, [pc, #404]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0b8      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800281e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800282c:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002836:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	4313      	orrs	r3, r2
 8002848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d040      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d115      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07f      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e073      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06b      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002896:	4b39      	ldr	r3, [pc, #228]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f023 0203 	bic.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	4936      	ldr	r1, [pc, #216]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a8:	f7ff f964 	bl	8001b74 <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b0:	f7ff f960 	bl	8001b74 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80028be:	4293      	cmp	r3, r2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e053      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 020c 	and.w	r2, r3, #12
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1eb      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d210      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4922      	ldr	r1, [pc, #136]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e032      	b.n	800296e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4916      	ldr	r1, [pc, #88]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	4313      	orrs	r3, r2
 8002944:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002946:	f000 f821 	bl	800298c <HAL_RCC_GetSysClockFreq>
 800294a:	4602      	mov	r2, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	490a      	ldr	r1, [pc, #40]	; (8002980 <HAL_RCC_ClockConfig+0x1c8>)
 8002958:	5ccb      	ldrb	r3, [r1, r3]
 800295a:	fa22 f303 	lsr.w	r3, r2, r3
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1cc>)
 8002960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1d0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff f8c2 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40022000 	.word	0x40022000
 800297c:	40021000 	.word	0x40021000
 8002980:	08004050 	.word	0x08004050
 8002984:	20000010 	.word	0x20000010
 8002988:	20000014 	.word	0x20000014

0800298c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800298c:	b490      	push	{r4, r7}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xac>)
 8002994:	1d3c      	adds	r4, r7, #4
 8002996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800299c:	f240 2301 	movw	r3, #513	; 0x201
 80029a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029b6:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x40>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x46>
 80029ca:	e02b      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b1c      	ldr	r3, [pc, #112]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ce:	623b      	str	r3, [r7, #32]
      break;
 80029d0:	e02b      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3328      	adds	r3, #40	; 0x28
 80029dc:	443b      	add	r3, r7
 80029de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029e2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	0c5b      	lsrs	r3, r3, #17
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	3328      	adds	r3, #40	; 0x28
 80029fa:	443b      	add	r3, r7
 80029fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	e004      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	623b      	str	r3, [r7, #32]
      break;
 8002a22:	e002      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc90      	pop	{r4, r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	08004040 	.word	0x08004040
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	007a1200 	.word	0x007a1200
 8002a44:	003d0900 	.word	0x003d0900

08002a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr
 8002a58:	20000010 	.word	0x20000010

08002a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a60:	f7ff fff2 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4903      	ldr	r1, [pc, #12]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	08004060 	.word	0x08004060

08002a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a88:	f7ff ffde 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0adb      	lsrs	r3, r3, #11
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4903      	ldr	r1, [pc, #12]	; (8002aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08004060 	.word	0x08004060

08002aac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <RCC_Delay+0x34>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <RCC_Delay+0x38>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a5b      	lsrs	r3, r3, #9
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac8:	bf00      	nop
  }
  while (Delay --);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	60fa      	str	r2, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f9      	bne.n	8002ac8 <RCC_Delay+0x1c>
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	10624dd3 	.word	0x10624dd3

08002ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e041      	b.n	8002b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fec2 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3304      	adds	r3, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 faf4 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d001      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a18      	ldr	r2, [pc, #96]	; (8002c10 <HAL_TIM_Base_Start+0x88>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d00e      	beq.n	8002bd0 <HAL_TIM_Base_Start+0x48>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bba:	d009      	beq.n	8002bd0 <HAL_TIM_Base_Start+0x48>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <HAL_TIM_Base_Start+0x8c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIM_Base_Start+0x48>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a13      	ldr	r2, [pc, #76]	; (8002c18 <HAL_TIM_Base_Start+0x90>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d111      	bne.n	8002bf4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d010      	beq.n	8002c04 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf2:	e007      	b.n	8002c04 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3714      	adds	r7, #20
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40000800 	.word	0x40000800

08002c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e041      	b.n	8002cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f839 	bl	8002cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	f000 fa5a 	bl	8003114 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_TIM_PWM_Start+0x24>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e022      	b.n	8002d36 <HAL_TIM_PWM_Start+0x6a>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d109      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x3e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	bf14      	ite	ne
 8002d02:	2301      	movne	r3, #1
 8002d04:	2300      	moveq	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	e015      	b.n	8002d36 <HAL_TIM_PWM_Start+0x6a>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d109      	bne.n	8002d24 <HAL_TIM_PWM_Start+0x58>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	e008      	b.n	8002d36 <HAL_TIM_PWM_Start+0x6a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e05e      	b.n	8002dfc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x82>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d4c:	e013      	b.n	8002d76 <HAL_TIM_PWM_Start+0xaa>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x92>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d5c:	e00b      	b.n	8002d76 <HAL_TIM_PWM_Start+0xaa>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_PWM_Start+0xa2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6c:	e003      	b.n	8002d76 <HAL_TIM_PWM_Start+0xaa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2202      	movs	r2, #2
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 fc48 	bl	8003614 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_TIM_PWM_Start+0x138>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d107      	bne.n	8002d9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a18      	ldr	r2, [pc, #96]	; (8002e04 <HAL_TIM_PWM_Start+0x138>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0xfa>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db0:	d009      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0xfa>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a14      	ldr	r2, [pc, #80]	; (8002e08 <HAL_TIM_PWM_Start+0x13c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0xfa>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <HAL_TIM_PWM_Start+0x140>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d111      	bne.n	8002dea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b06      	cmp	r3, #6
 8002dd6:	d010      	beq.n	8002dfa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de8:	e007      	b.n	8002dfa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40000800 	.word	0x40000800

08002e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e0ac      	b.n	8002f84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b0c      	cmp	r3, #12
 8002e36:	f200 809f 	bhi.w	8002f78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e3a:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002f79 	.word	0x08002f79
 8002e48:	08002f79 	.word	0x08002f79
 8002e4c:	08002f79 	.word	0x08002f79
 8002e50:	08002eb5 	.word	0x08002eb5
 8002e54:	08002f79 	.word	0x08002f79
 8002e58:	08002f79 	.word	0x08002f79
 8002e5c:	08002f79 	.word	0x08002f79
 8002e60:	08002ef7 	.word	0x08002ef7
 8002e64:	08002f79 	.word	0x08002f79
 8002e68:	08002f79 	.word	0x08002f79
 8002e6c:	08002f79 	.word	0x08002f79
 8002e70:	08002f37 	.word	0x08002f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f9ac 	bl	80031d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6999      	ldr	r1, [r3, #24]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	619a      	str	r2, [r3, #24]
      break;
 8002eb2:	e062      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f9f2 	bl	80032a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6999      	ldr	r1, [r3, #24]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	021a      	lsls	r2, r3, #8
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	619a      	str	r2, [r3, #24]
      break;
 8002ef4:	e041      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 fa3b 	bl	8003378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	69da      	ldr	r2, [r3, #28]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0208 	orr.w	r2, r2, #8
 8002f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0204 	bic.w	r2, r2, #4
 8002f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69d9      	ldr	r1, [r3, #28]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	61da      	str	r2, [r3, #28]
      break;
 8002f34:	e021      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fa85 	bl	800344c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69d9      	ldr	r1, [r3, #28]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	021a      	lsls	r2, r3, #8
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	61da      	str	r2, [r3, #28]
      break;
 8002f76:	e000      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIM_ConfigClockSource+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0b3      	b.n	800310c <HAL_TIM_ConfigClockSource+0x180>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fdc:	d03e      	beq.n	800305c <HAL_TIM_ConfigClockSource+0xd0>
 8002fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe2:	f200 8087 	bhi.w	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 8002fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fea:	f000 8085 	beq.w	80030f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d87f      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 8002ff4:	2b70      	cmp	r3, #112	; 0x70
 8002ff6:	d01a      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xa2>
 8002ff8:	2b70      	cmp	r3, #112	; 0x70
 8002ffa:	d87b      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 8002ffc:	2b60      	cmp	r3, #96	; 0x60
 8002ffe:	d050      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0x116>
 8003000:	2b60      	cmp	r3, #96	; 0x60
 8003002:	d877      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 8003004:	2b50      	cmp	r3, #80	; 0x50
 8003006:	d03c      	beq.n	8003082 <HAL_TIM_ConfigClockSource+0xf6>
 8003008:	2b50      	cmp	r3, #80	; 0x50
 800300a:	d873      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 800300c:	2b40      	cmp	r3, #64	; 0x40
 800300e:	d058      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x136>
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d86f      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b30      	cmp	r3, #48	; 0x30
 8003016:	d064      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x156>
 8003018:	2b30      	cmp	r3, #48	; 0x30
 800301a:	d86b      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b20      	cmp	r3, #32
 800301e:	d060      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x156>
 8003020:	2b20      	cmp	r3, #32
 8003022:	d867      	bhi.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05c      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x156>
 8003028:	2b10      	cmp	r3, #16
 800302a:	d05a      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800302c:	e062      	b.n	80030f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6899      	ldr	r1, [r3, #8]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f000 faca 	bl	80035d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003050:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	609a      	str	r2, [r3, #8]
      break;
 800305a:	e04e      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	6899      	ldr	r1, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f000 fab3 	bl	80035d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800307e:	609a      	str	r2, [r3, #8]
      break;
 8003080:	e03b      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	f000 fa2a 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2150      	movs	r1, #80	; 0x50
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fa81 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 80030a0:	e02b      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 fa48 	bl	8003544 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2160      	movs	r1, #96	; 0x60
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fa71 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e01b      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f000 fa0a 	bl	80034e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fa61 	bl	80035a2 <TIM_ITRx_SetConfig>
      break;
 80030e0:	e00b      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	4610      	mov	r0, r2
 80030ee:	f000 fa58 	bl	80035a2 <TIM_ITRx_SetConfig>
        break;
 80030f2:	e002      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030f4:	bf00      	nop
 80030f6:	e000      	b.n	80030fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00b      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003132:	d007      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0x30>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d108      	bne.n	8003156 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1c      	ldr	r2, [pc, #112]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00b      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003164:	d007      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <TIM_Base_SetConfig+0xbc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d003      	beq.n	8003176 <TIM_Base_SetConfig+0x62>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <TIM_Base_SetConfig+0xc0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d108      	bne.n	8003188 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800317c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a07      	ldr	r2, [pc, #28]	; (80031cc <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	40012c00 	.word	0x40012c00
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800

080031d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f023 0201 	bic.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10c      	bne.n	800324e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0308 	bic.w	r3, r3, #8
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <TIM_OC1_SetConfig+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d111      	bne.n	800327a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40012c00 	.word	0x40012c00

080032a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0210 	bic.w	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f023 0320 	bic.w	r3, r3, #32
 80032ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800330a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a14      	ldr	r2, [pc, #80]	; (8003374 <TIM_OC2_SetConfig+0xd0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d113      	bne.n	8003350 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800332e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1d      	ldr	r2, [pc, #116]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <TIM_OC3_SetConfig+0xd0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d113      	bne.n	8003422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00

0800344c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800344c:	b480      	push	{r7}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	031b      	lsls	r3, r3, #12
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <TIM_OC4_SetConfig+0x98>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d109      	bne.n	80034c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	40012c00 	.word	0x40012c00

080034e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 030a 	bic.w	r3, r3, #10
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	621a      	str	r2, [r3, #32]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f023 0210 	bic.w	r2, r3, #16
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800356e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	031b      	lsls	r3, r3, #12
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003580:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	621a      	str	r2, [r3, #32]
}
 8003598:	bf00      	nop
 800359a:	371c      	adds	r7, #28
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b085      	sub	sp, #20
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	f043 0307 	orr.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	609a      	str	r2, [r3, #8]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b087      	sub	sp, #28
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	2201      	movs	r2, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1a      	ldr	r2, [r3, #32]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	fa01 f303 	lsl.w	r3, r1, r3
 800364c:	431a      	orrs	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]
}
 8003652:	bf00      	nop
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003670:	2302      	movs	r3, #2
 8003672:	e046      	b.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a16      	ldr	r2, [pc, #88]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c0:	d009      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800

08003718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e03f      	b.n	80037aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe f90e 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800375a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fba9 	bl	8003eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695a      	ldr	r2, [r3, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d11d      	bne.n	8003808 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Receive_IT+0x26>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e016      	b.n	800380a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Receive_IT+0x38>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e00f      	b.n	800380a <HAL_UART_Receive_IT+0x58>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f9cf 	bl	8003ba2 <UART_Start_Receive_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	e000      	b.n	800380a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	f003 0320 	and.w	r3, r3, #32
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_UART_IRQHandler+0x52>
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa7f 	bl	8003d62 <UART_Receive_IT>
      return;
 8003864:	e17b      	b.n	8003b5e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80b1 	beq.w	80039d0 <HAL_UART_IRQHandler+0x1bc>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d105      	bne.n	8003884 <HAL_UART_IRQHandler+0x70>
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 80a6 	beq.w	80039d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_UART_IRQHandler+0x90>
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d005      	beq.n	80038a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_UART_IRQHandler+0xb0>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <HAL_UART_IRQHandler+0xd0>
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	f043 0204 	orr.w	r2, r3, #4
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00f      	beq.n	800390e <HAL_UART_IRQHandler+0xfa>
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_UART_IRQHandler+0xee>
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f043 0208 	orr.w	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 811e 	beq.w	8003b54 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_UART_IRQHandler+0x11e>
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fa18 	bl	8003d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <HAL_UART_IRQHandler+0x146>
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d031      	beq.n	80039be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f95a 	bl	8003c14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d023      	beq.n	80039b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695a      	ldr	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003982:	2b00      	cmp	r3, #0
 8003984:	d013      	beq.n	80039ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	4a76      	ldr	r2, [pc, #472]	; (8003b64 <HAL_UART_IRQHandler+0x350>)
 800398c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fa64 	bl	8001e60 <HAL_DMA_Abort_IT>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d016      	beq.n	80039cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a8:	4610      	mov	r0, r2
 80039aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	e00e      	b.n	80039cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8e3 	bl	8003b7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	e00a      	b.n	80039cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8df 	bl	8003b7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039bc:	e006      	b.n	80039cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8db 	bl	8003b7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ca:	e0c3      	b.n	8003b54 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	bf00      	nop
    return;
 80039ce:	e0c1      	b.n	8003b54 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f040 80a1 	bne.w	8003b1c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 809b 	beq.w	8003b1c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8095 	beq.w	8003b1c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d04e      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a20:	8a3b      	ldrh	r3, [r7, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8098 	beq.w	8003b58 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a2c:	8a3a      	ldrh	r2, [r7, #16]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	f080 8092 	bcs.w	8003b58 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8a3a      	ldrh	r2, [r7, #16]
 8003a38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d02b      	beq.n	8003a9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0210 	bic.w	r2, r2, #16
 8003a90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f9a7 	bl	8001dea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f86d 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ab2:	e051      	b.n	8003b58 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d047      	beq.n	8003b5c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003acc:	8a7b      	ldrh	r3, [r7, #18]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d044      	beq.n	8003b5c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ae0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0210 	bic.w	r2, r2, #16
 8003b0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b10:	8a7b      	ldrh	r3, [r7, #18]
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f839 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003b1a:	e01f      	b.n	8003b5c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_UART_IRQHandler+0x324>
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f8af 	bl	8003c94 <UART_Transmit_IT>
    return;
 8003b36:	e012      	b.n	8003b5e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <HAL_UART_IRQHandler+0x34a>
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8f0 	bl	8003d32 <UART_EndTransmit_IT>
    return;
 8003b52:	e004      	b.n	8003b5e <HAL_UART_IRQHandler+0x34a>
    return;
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <HAL_UART_IRQHandler+0x34a>
      return;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_UART_IRQHandler+0x34a>
      return;
 8003b5c:	bf00      	nop
  }
}
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08003c6d 	.word	0x08003c6d

08003b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b083      	sub	sp, #12
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	4613      	mov	r3, r2
 8003bae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2222      	movs	r2, #34	; 0x22
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0220 	orr.w	r2, r2, #32
 8003c06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bc80      	pop	{r7}
 8003c12:	4770      	bx	lr

08003c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0210 	bic.w	r2, r2, #16
 8003c52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ff77 	bl	8003b7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b21      	cmp	r3, #33	; 0x21
 8003ca6:	d13e      	bne.n	8003d26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d114      	bne.n	8003cdc <UART_Transmit_IT+0x48>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d110      	bne.n	8003cdc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]
 8003cda:	e008      	b.n	8003cee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6211      	str	r1, [r2, #32]
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ff08 	bl	8003b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b22      	cmp	r3, #34	; 0x22
 8003d74:	f040 8099 	bne.w	8003eaa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d117      	bne.n	8003db2 <UART_Receive_IT+0x50>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
 8003db0:	e026      	b.n	8003e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d007      	beq.n	8003dd6 <UART_Receive_IT+0x74>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <UART_Receive_IT+0x82>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	e008      	b.n	8003df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	1c5a      	adds	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d148      	bne.n	8003ea6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0220 	bic.w	r2, r2, #32
 8003e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0201 	bic.w	r2, r2, #1
 8003e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d123      	bne.n	8003e9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0210 	bic.w	r2, r2, #16
 8003e68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b10      	cmp	r3, #16
 8003e76:	d10a      	bne.n	8003e8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e78:	2300      	movs	r3, #0
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e92:	4619      	mov	r1, r3
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7ff fe79 	bl	8003b8c <HAL_UARTEx_RxEventCallback>
 8003e9a:	e002      	b.n	8003ea2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fd fbc7 	bl	8001630 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e002      	b.n	8003eac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	431a      	orrs	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003eee:	f023 030c 	bic.w	r3, r3, #12
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	430b      	orrs	r3, r1
 8003efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <UART_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d103      	bne.n	8003f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f1c:	f7fe fdb2 	bl	8002a84 <HAL_RCC_GetPCLK2Freq>
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	e002      	b.n	8003f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f24:	f7fe fd9a 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <UART_SetConfig+0x118>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	0119      	lsls	r1, r3, #4
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009a      	lsls	r2, r3, #2
 8003f54:	441a      	add	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f60:	4b1a      	ldr	r3, [pc, #104]	; (8003fcc <UART_SetConfig+0x118>)
 8003f62:	fba3 0302 	umull	r0, r3, r3, r2
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	2064      	movs	r0, #100	; 0x64
 8003f6a:	fb00 f303 	mul.w	r3, r0, r3
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	3332      	adds	r3, #50	; 0x32
 8003f74:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <UART_SetConfig+0x118>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f80:	4419      	add	r1, r3
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009a      	lsls	r2, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <UART_SetConfig+0x118>)
 8003f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	2064      	movs	r0, #100	; 0x64
 8003fa2:	fb00 f303 	mul.w	r3, r0, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	3332      	adds	r3, #50	; 0x32
 8003fac:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <UART_SetConfig+0x118>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	440a      	add	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	51eb851f 	.word	0x51eb851f

08003fd0 <__libc_init_array>:
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	4d0c      	ldr	r5, [pc, #48]	; (8004008 <__libc_init_array+0x38>)
 8003fd6:	4c0d      	ldr	r4, [pc, #52]	; (800400c <__libc_init_array+0x3c>)
 8003fd8:	1b64      	subs	r4, r4, r5
 8003fda:	10a4      	asrs	r4, r4, #2
 8003fdc:	42a6      	cmp	r6, r4
 8003fde:	d109      	bne.n	8003ff4 <__libc_init_array+0x24>
 8003fe0:	f000 f822 	bl	8004028 <_init>
 8003fe4:	2600      	movs	r6, #0
 8003fe6:	4d0a      	ldr	r5, [pc, #40]	; (8004010 <__libc_init_array+0x40>)
 8003fe8:	4c0a      	ldr	r4, [pc, #40]	; (8004014 <__libc_init_array+0x44>)
 8003fea:	1b64      	subs	r4, r4, r5
 8003fec:	10a4      	asrs	r4, r4, #2
 8003fee:	42a6      	cmp	r6, r4
 8003ff0:	d105      	bne.n	8003ffe <__libc_init_array+0x2e>
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff8:	4798      	blx	r3
 8003ffa:	3601      	adds	r6, #1
 8003ffc:	e7ee      	b.n	8003fdc <__libc_init_array+0xc>
 8003ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004002:	4798      	blx	r3
 8004004:	3601      	adds	r6, #1
 8004006:	e7f2      	b.n	8003fee <__libc_init_array+0x1e>
 8004008:	08004068 	.word	0x08004068
 800400c:	08004068 	.word	0x08004068
 8004010:	08004068 	.word	0x08004068
 8004014:	0800406c 	.word	0x0800406c

08004018 <memset>:
 8004018:	4603      	mov	r3, r0
 800401a:	4402      	add	r2, r0
 800401c:	4293      	cmp	r3, r2
 800401e:	d100      	bne.n	8004022 <memset+0xa>
 8004020:	4770      	bx	lr
 8004022:	f803 1b01 	strb.w	r1, [r3], #1
 8004026:	e7f9      	b.n	800401c <memset+0x4>

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr
